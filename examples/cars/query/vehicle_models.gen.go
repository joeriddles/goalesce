// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joeriddles/goalesce/examples/cars/model"
)

func newVehicleModel(db *gorm.DB, opts ...gen.DOOption) vehicleModel {
	_vehicleModel := vehicleModel{}

	_vehicleModel.vehicleModelDo.UseDB(db, opts...)
	_vehicleModel.vehicleModelDo.UseModel(&model.VehicleModel{})

	tableName := _vehicleModel.vehicleModelDo.TableName()
	_vehicleModel.ALL = field.NewAsterisk(tableName)
	_vehicleModel.ID = field.NewUint(tableName, "id")
	_vehicleModel.CreatedAt = field.NewTime(tableName, "created_at")
	_vehicleModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vehicleModel.DeletedAt = field.NewField(tableName, "deleted_at")
	_vehicleModel.Name = field.NewString(tableName, "name")
	_vehicleModel.ManufacturerID = field.NewUint(tableName, "manufacturer_id")
	_vehicleModel.Manufacturer = vehicleModelBelongsToManufacturer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Manufacturer", "model.Manufacturer"),
		Vehicles: struct {
			field.RelationField
			Manufacturer struct {
				field.RelationField
			}
			Parts struct {
				field.RelationField
				Models struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Manufacturer.Vehicles", "model.VehicleModel"),
			Manufacturer: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Manufacturer.Vehicles.Manufacturer", "model.Manufacturer"),
			},
			Parts: struct {
				field.RelationField
				Models struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Manufacturer.Vehicles.Parts", "model.Part"),
				Models: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Manufacturer.Vehicles.Parts.Models", "model.VehicleModel"),
				},
			},
		},
	}

	_vehicleModel.Parts = vehicleModelManyToManyParts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Parts", "model.Part"),
	}

	_vehicleModel.fillFieldMap()

	return _vehicleModel
}

type vehicleModel struct {
	vehicleModelDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Name           field.String
	ManufacturerID field.Uint
	Manufacturer   vehicleModelBelongsToManufacturer

	Parts vehicleModelManyToManyParts

	fieldMap map[string]field.Expr
}

func (v vehicleModel) Table(newTableName string) *vehicleModel {
	v.vehicleModelDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vehicleModel) As(alias string) *vehicleModel {
	v.vehicleModelDo.DO = *(v.vehicleModelDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vehicleModel) updateTableName(table string) *vehicleModel {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Name = field.NewString(table, "name")
	v.ManufacturerID = field.NewUint(table, "manufacturer_id")

	v.fillFieldMap()

	return v
}

func (v *vehicleModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vehicleModel) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 8)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["name"] = v.Name
	v.fieldMap["manufacturer_id"] = v.ManufacturerID

}

func (v vehicleModel) clone(db *gorm.DB) vehicleModel {
	v.vehicleModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vehicleModel) replaceDB(db *gorm.DB) vehicleModel {
	v.vehicleModelDo.ReplaceDB(db)
	return v
}

type vehicleModelBelongsToManufacturer struct {
	db *gorm.DB

	field.RelationField

	Vehicles struct {
		field.RelationField
		Manufacturer struct {
			field.RelationField
		}
		Parts struct {
			field.RelationField
			Models struct {
				field.RelationField
			}
		}
	}
}

func (a vehicleModelBelongsToManufacturer) Where(conds ...field.Expr) *vehicleModelBelongsToManufacturer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vehicleModelBelongsToManufacturer) WithContext(ctx context.Context) *vehicleModelBelongsToManufacturer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vehicleModelBelongsToManufacturer) Session(session *gorm.Session) *vehicleModelBelongsToManufacturer {
	a.db = a.db.Session(session)
	return &a
}

func (a vehicleModelBelongsToManufacturer) Model(m *model.VehicleModel) *vehicleModelBelongsToManufacturerTx {
	return &vehicleModelBelongsToManufacturerTx{a.db.Model(m).Association(a.Name())}
}

type vehicleModelBelongsToManufacturerTx struct{ tx *gorm.Association }

func (a vehicleModelBelongsToManufacturerTx) Find() (result *model.Manufacturer, err error) {
	return result, a.tx.Find(&result)
}

func (a vehicleModelBelongsToManufacturerTx) Append(values ...*model.Manufacturer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vehicleModelBelongsToManufacturerTx) Replace(values ...*model.Manufacturer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vehicleModelBelongsToManufacturerTx) Delete(values ...*model.Manufacturer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vehicleModelBelongsToManufacturerTx) Clear() error {
	return a.tx.Clear()
}

func (a vehicleModelBelongsToManufacturerTx) Count() int64 {
	return a.tx.Count()
}

type vehicleModelManyToManyParts struct {
	db *gorm.DB

	field.RelationField
}

func (a vehicleModelManyToManyParts) Where(conds ...field.Expr) *vehicleModelManyToManyParts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vehicleModelManyToManyParts) WithContext(ctx context.Context) *vehicleModelManyToManyParts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vehicleModelManyToManyParts) Session(session *gorm.Session) *vehicleModelManyToManyParts {
	a.db = a.db.Session(session)
	return &a
}

func (a vehicleModelManyToManyParts) Model(m *model.VehicleModel) *vehicleModelManyToManyPartsTx {
	return &vehicleModelManyToManyPartsTx{a.db.Model(m).Association(a.Name())}
}

type vehicleModelManyToManyPartsTx struct{ tx *gorm.Association }

func (a vehicleModelManyToManyPartsTx) Find() (result []*model.Part, err error) {
	return result, a.tx.Find(&result)
}

func (a vehicleModelManyToManyPartsTx) Append(values ...*model.Part) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vehicleModelManyToManyPartsTx) Replace(values ...*model.Part) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vehicleModelManyToManyPartsTx) Delete(values ...*model.Part) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vehicleModelManyToManyPartsTx) Clear() error {
	return a.tx.Clear()
}

func (a vehicleModelManyToManyPartsTx) Count() int64 {
	return a.tx.Count()
}

type vehicleModelDo struct{ gen.DO }

type IVehicleModelDo interface {
	gen.SubQuery
	Debug() IVehicleModelDo
	WithContext(ctx context.Context) IVehicleModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVehicleModelDo
	WriteDB() IVehicleModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVehicleModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVehicleModelDo
	Not(conds ...gen.Condition) IVehicleModelDo
	Or(conds ...gen.Condition) IVehicleModelDo
	Select(conds ...field.Expr) IVehicleModelDo
	Where(conds ...gen.Condition) IVehicleModelDo
	Order(conds ...field.Expr) IVehicleModelDo
	Distinct(cols ...field.Expr) IVehicleModelDo
	Omit(cols ...field.Expr) IVehicleModelDo
	Join(table schema.Tabler, on ...field.Expr) IVehicleModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVehicleModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVehicleModelDo
	Group(cols ...field.Expr) IVehicleModelDo
	Having(conds ...gen.Condition) IVehicleModelDo
	Limit(limit int) IVehicleModelDo
	Offset(offset int) IVehicleModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVehicleModelDo
	Unscoped() IVehicleModelDo
	Create(values ...*model.VehicleModel) error
	CreateInBatches(values []*model.VehicleModel, batchSize int) error
	Save(values ...*model.VehicleModel) error
	First() (*model.VehicleModel, error)
	Take() (*model.VehicleModel, error)
	Last() (*model.VehicleModel, error)
	Find() ([]*model.VehicleModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VehicleModel, err error)
	FindInBatches(result *[]*model.VehicleModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VehicleModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVehicleModelDo
	Assign(attrs ...field.AssignExpr) IVehicleModelDo
	Joins(fields ...field.RelationField) IVehicleModelDo
	Preload(fields ...field.RelationField) IVehicleModelDo
	FirstOrInit() (*model.VehicleModel, error)
	FirstOrCreate() (*model.VehicleModel, error)
	FindByPage(offset int, limit int) (result []*model.VehicleModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVehicleModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vehicleModelDo) Debug() IVehicleModelDo {
	return v.withDO(v.DO.Debug())
}

func (v vehicleModelDo) WithContext(ctx context.Context) IVehicleModelDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vehicleModelDo) ReadDB() IVehicleModelDo {
	return v.Clauses(dbresolver.Read)
}

func (v vehicleModelDo) WriteDB() IVehicleModelDo {
	return v.Clauses(dbresolver.Write)
}

func (v vehicleModelDo) Session(config *gorm.Session) IVehicleModelDo {
	return v.withDO(v.DO.Session(config))
}

func (v vehicleModelDo) Clauses(conds ...clause.Expression) IVehicleModelDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vehicleModelDo) Returning(value interface{}, columns ...string) IVehicleModelDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vehicleModelDo) Not(conds ...gen.Condition) IVehicleModelDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vehicleModelDo) Or(conds ...gen.Condition) IVehicleModelDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vehicleModelDo) Select(conds ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vehicleModelDo) Where(conds ...gen.Condition) IVehicleModelDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vehicleModelDo) Order(conds ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vehicleModelDo) Distinct(cols ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vehicleModelDo) Omit(cols ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vehicleModelDo) Join(table schema.Tabler, on ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vehicleModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vehicleModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vehicleModelDo) Group(cols ...field.Expr) IVehicleModelDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vehicleModelDo) Having(conds ...gen.Condition) IVehicleModelDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vehicleModelDo) Limit(limit int) IVehicleModelDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vehicleModelDo) Offset(offset int) IVehicleModelDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vehicleModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVehicleModelDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vehicleModelDo) Unscoped() IVehicleModelDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vehicleModelDo) Create(values ...*model.VehicleModel) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vehicleModelDo) CreateInBatches(values []*model.VehicleModel, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vehicleModelDo) Save(values ...*model.VehicleModel) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vehicleModelDo) First() (*model.VehicleModel, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VehicleModel), nil
	}
}

func (v vehicleModelDo) Take() (*model.VehicleModel, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VehicleModel), nil
	}
}

func (v vehicleModelDo) Last() (*model.VehicleModel, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VehicleModel), nil
	}
}

func (v vehicleModelDo) Find() ([]*model.VehicleModel, error) {
	result, err := v.DO.Find()
	return result.([]*model.VehicleModel), err
}

func (v vehicleModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VehicleModel, err error) {
	buf := make([]*model.VehicleModel, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vehicleModelDo) FindInBatches(result *[]*model.VehicleModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vehicleModelDo) Attrs(attrs ...field.AssignExpr) IVehicleModelDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vehicleModelDo) Assign(attrs ...field.AssignExpr) IVehicleModelDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vehicleModelDo) Joins(fields ...field.RelationField) IVehicleModelDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vehicleModelDo) Preload(fields ...field.RelationField) IVehicleModelDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vehicleModelDo) FirstOrInit() (*model.VehicleModel, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VehicleModel), nil
	}
}

func (v vehicleModelDo) FirstOrCreate() (*model.VehicleModel, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VehicleModel), nil
	}
}

func (v vehicleModelDo) FindByPage(offset int, limit int) (result []*model.VehicleModel, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vehicleModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vehicleModelDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vehicleModelDo) Delete(models ...*model.VehicleModel) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vehicleModelDo) withDO(do gen.Dao) *vehicleModelDo {
	v.DO = *do.(*gen.DO)
	return v
}
