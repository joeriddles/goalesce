// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
  "context"
  "fmt"

  repository "{{.repositoryImportPath}}"
  query "{{.queryPackage}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
)

type {{.model.Name}}Controller interface {
  Get{{.model.Name}}(ctx context.Context, request {{Types}}Get{{.model.Name}}RequestObject) ({{Types}}Get{{.model.Name}}ResponseObject, error)
  Post{{.model.Name}}(ctx context.Context, request {{Types}}Post{{.model.Name}}RequestObject) ({{Types}}Post{{.model.Name}}ResponseObject, error)
  Delete{{.model.Name}}ID(ctx context.Context, request {{Types}}Delete{{.model.Name}}IDRequestObject) ({{Types}}Delete{{.model.Name}}IDResponseObject, error)
  Get{{.model.Name}}ID(ctx context.Context, request {{Types}}Get{{.model.Name}}IDRequestObject) ({{Types}}Get{{.model.Name}}IDResponseObject, error)
  Put{{.model.Name}}ID(ctx context.Context, request {{Types}}Put{{.model.Name}}IDRequestObject) ({{Types}}Put{{.model.Name}}IDResponseObject, error)
}

type {{.model.Name|ToCamelCase}}Controller struct {
  repository repository.{{.model.Name}}Repository
  mapper {{.model.Name}}Mapper
  apiMapper {{.model.Name}}ApiMapper
}

func New{{.model.Name}}Controller(query *query.Query) {{.model.Name}}Controller {
  fmt.Println("THIS IS SO CUSTOM!")

  return &{{.model.Name|ToCamelCase}}Controller{
    repository: repository.New{{.model.Name}}Repository(query),
    mapper: New{{.model.Name}}Mapper(),
    apiMapper: New{{.model.Name}}ApiMapper(),
  }
}

func (c *{{.model.Name|ToCamelCase}}Controller) Get{{.model.Name}}(ctx context.Context, request {{Types}}Get{{.model.Name}}RequestObject) ({{Types}}Get{{.model.Name}}ResponseObject, error) {
  {{.model.Name|ToCamelCase}}s, err := c.repository.List(ctx, map[string]interface{}{})
  if err != nil {
    return nil, err
  }

  result := []{{Types}}{{.model.Name}}{}
  for _, {{.model.Name|ToCamelCase}} := range {{.model.Name|ToCamelCase}}s {
    api{{.model.Name}} := c.apiMapper.Map(*{{.model.Name|ToCamelCase}})
    result = append(result, api{{.model.Name}})
  }

  return {{Types}}Get{{.model.Name}}200JSONResponse(result), nil
}

func (c *{{.model.Name|ToCamelCase}}Controller) Post{{.model.Name}}(ctx context.Context, request {{Types}}Post{{.model.Name}}RequestObject) ({{Types}}Post{{.model.Name}}ResponseObject, error) {
	src := request.Body
  dst := &model.{{.model.Name}}{}
  {{range .createApi.Fields}}
  {{.|ConvertToModel}}{{end}}

  createdModel, err := c.repository.Create(ctx, *dst)
	if err != nil {
		return nil, err
	}
	apiModel := c.apiMapper.Map(*createdModel)
  return {{Types}}Post{{.model.Name}}201JSONResponse(apiModel), nil
}

func (c *{{.model.Name|ToCamelCase}}Controller) Delete{{.model.Name}}ID(ctx context.Context, request {{Types}}Delete{{.model.Name}}IDRequestObject) ({{Types}}Delete{{.model.Name}}IDResponseObject, error) {
  if err := c.repository.Delete(ctx, request.ID); err != nil {
    return nil, err
  }
  return {{Types}}Delete{{.model.Name}}ID204Response{}, nil
}

func (c *{{.model.Name|ToCamelCase}}Controller) Get{{.model.Name}}ID(ctx context.Context, request {{Types}}Get{{.model.Name}}IDRequestObject) ({{Types}}Get{{.model.Name}}IDResponseObject, error) {
  model, err := c.repository.Get(ctx, request.ID)
  if err != nil {
    return nil, err
  }
  apiModel := c.apiMapper.Map(*model)
  return {{Types}}Get{{.model.Name}}ID200JSONResponse(apiModel), err
}

func (c *{{.model.Name|ToCamelCase}}Controller) Put{{.model.Name}}ID(ctx context.Context, request {{Types}}Put{{.model.Name}}IDRequestObject) ({{Types}}Put{{.model.Name}}IDResponseObject, error) {
	obj := request.Body
	update := map[string]interface{}{}
  {{range .model.Fields}}
  update["{{.Name}}"] = obj.{{.Name}}  {{end}}

  if _, err := c.repository.Update(ctx, request.ID, update); err != nil {
    return nil, err
  }
  return {{Types}}Put{{.model.Name}}ID204Response{}, nil
}
