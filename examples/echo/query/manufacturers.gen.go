// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joeriddles/goalesce/examples/echo/model"
)

func newManufacturer(db *gorm.DB, opts ...gen.DOOption) manufacturer {
	_manufacturer := manufacturer{}

	_manufacturer.manufacturerDo.UseDB(db, opts...)
	_manufacturer.manufacturerDo.UseModel(&model.Manufacturer{})

	tableName := _manufacturer.manufacturerDo.TableName()
	_manufacturer.ALL = field.NewAsterisk(tableName)
	_manufacturer.ID = field.NewUint(tableName, "id")
	_manufacturer.CreatedAt = field.NewTime(tableName, "created_at")
	_manufacturer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_manufacturer.DeletedAt = field.NewField(tableName, "deleted_at")
	_manufacturer.Name = field.NewString(tableName, "name")
	_manufacturer.Vehicles = manufacturerHasManyVehicles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Vehicles", "model.VehicleModel"),
		Manufacturer: struct {
			field.RelationField
			Vehicles struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Vehicles.Manufacturer", "model.Manufacturer"),
			Vehicles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Vehicles.Manufacturer.Vehicles", "model.VehicleModel"),
			},
		},
		Parts: struct {
			field.RelationField
			Models struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Vehicles.Parts", "model.Part"),
			Models: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Vehicles.Parts.Models", "model.VehicleModel"),
			},
		},
	}

	_manufacturer.fillFieldMap()

	return _manufacturer
}

type manufacturer struct {
	manufacturerDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Vehicles  manufacturerHasManyVehicles

	fieldMap map[string]field.Expr
}

func (m manufacturer) Table(newTableName string) *manufacturer {
	m.manufacturerDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m manufacturer) As(alias string) *manufacturer {
	m.manufacturerDo.DO = *(m.manufacturerDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *manufacturer) updateTableName(table string) *manufacturer {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Name = field.NewString(table, "name")

	m.fillFieldMap()

	return m
}

func (m *manufacturer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manufacturer) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["name"] = m.Name

}

func (m manufacturer) clone(db *gorm.DB) manufacturer {
	m.manufacturerDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m manufacturer) replaceDB(db *gorm.DB) manufacturer {
	m.manufacturerDo.ReplaceDB(db)
	return m
}

type manufacturerHasManyVehicles struct {
	db *gorm.DB

	field.RelationField

	Manufacturer struct {
		field.RelationField
		Vehicles struct {
			field.RelationField
		}
	}
	Parts struct {
		field.RelationField
		Models struct {
			field.RelationField
		}
	}
}

func (a manufacturerHasManyVehicles) Where(conds ...field.Expr) *manufacturerHasManyVehicles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a manufacturerHasManyVehicles) WithContext(ctx context.Context) *manufacturerHasManyVehicles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a manufacturerHasManyVehicles) Session(session *gorm.Session) *manufacturerHasManyVehicles {
	a.db = a.db.Session(session)
	return &a
}

func (a manufacturerHasManyVehicles) Model(m *model.Manufacturer) *manufacturerHasManyVehiclesTx {
	return &manufacturerHasManyVehiclesTx{a.db.Model(m).Association(a.Name())}
}

type manufacturerHasManyVehiclesTx struct{ tx *gorm.Association }

func (a manufacturerHasManyVehiclesTx) Find() (result []*model.VehicleModel, err error) {
	return result, a.tx.Find(&result)
}

func (a manufacturerHasManyVehiclesTx) Append(values ...*model.VehicleModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a manufacturerHasManyVehiclesTx) Replace(values ...*model.VehicleModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a manufacturerHasManyVehiclesTx) Delete(values ...*model.VehicleModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a manufacturerHasManyVehiclesTx) Clear() error {
	return a.tx.Clear()
}

func (a manufacturerHasManyVehiclesTx) Count() int64 {
	return a.tx.Count()
}

type manufacturerDo struct{ gen.DO }

type IManufacturerDo interface {
	gen.SubQuery
	Debug() IManufacturerDo
	WithContext(ctx context.Context) IManufacturerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IManufacturerDo
	WriteDB() IManufacturerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IManufacturerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IManufacturerDo
	Not(conds ...gen.Condition) IManufacturerDo
	Or(conds ...gen.Condition) IManufacturerDo
	Select(conds ...field.Expr) IManufacturerDo
	Where(conds ...gen.Condition) IManufacturerDo
	Order(conds ...field.Expr) IManufacturerDo
	Distinct(cols ...field.Expr) IManufacturerDo
	Omit(cols ...field.Expr) IManufacturerDo
	Join(table schema.Tabler, on ...field.Expr) IManufacturerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IManufacturerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IManufacturerDo
	Group(cols ...field.Expr) IManufacturerDo
	Having(conds ...gen.Condition) IManufacturerDo
	Limit(limit int) IManufacturerDo
	Offset(offset int) IManufacturerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IManufacturerDo
	Unscoped() IManufacturerDo
	Create(values ...*model.Manufacturer) error
	CreateInBatches(values []*model.Manufacturer, batchSize int) error
	Save(values ...*model.Manufacturer) error
	First() (*model.Manufacturer, error)
	Take() (*model.Manufacturer, error)
	Last() (*model.Manufacturer, error)
	Find() ([]*model.Manufacturer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Manufacturer, err error)
	FindInBatches(result *[]*model.Manufacturer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Manufacturer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IManufacturerDo
	Assign(attrs ...field.AssignExpr) IManufacturerDo
	Joins(fields ...field.RelationField) IManufacturerDo
	Preload(fields ...field.RelationField) IManufacturerDo
	FirstOrInit() (*model.Manufacturer, error)
	FirstOrCreate() (*model.Manufacturer, error)
	FindByPage(offset int, limit int) (result []*model.Manufacturer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IManufacturerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m manufacturerDo) Debug() IManufacturerDo {
	return m.withDO(m.DO.Debug())
}

func (m manufacturerDo) WithContext(ctx context.Context) IManufacturerDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m manufacturerDo) ReadDB() IManufacturerDo {
	return m.Clauses(dbresolver.Read)
}

func (m manufacturerDo) WriteDB() IManufacturerDo {
	return m.Clauses(dbresolver.Write)
}

func (m manufacturerDo) Session(config *gorm.Session) IManufacturerDo {
	return m.withDO(m.DO.Session(config))
}

func (m manufacturerDo) Clauses(conds ...clause.Expression) IManufacturerDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m manufacturerDo) Returning(value interface{}, columns ...string) IManufacturerDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m manufacturerDo) Not(conds ...gen.Condition) IManufacturerDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m manufacturerDo) Or(conds ...gen.Condition) IManufacturerDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m manufacturerDo) Select(conds ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m manufacturerDo) Where(conds ...gen.Condition) IManufacturerDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m manufacturerDo) Order(conds ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m manufacturerDo) Distinct(cols ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m manufacturerDo) Omit(cols ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m manufacturerDo) Join(table schema.Tabler, on ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m manufacturerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m manufacturerDo) RightJoin(table schema.Tabler, on ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m manufacturerDo) Group(cols ...field.Expr) IManufacturerDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m manufacturerDo) Having(conds ...gen.Condition) IManufacturerDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m manufacturerDo) Limit(limit int) IManufacturerDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m manufacturerDo) Offset(offset int) IManufacturerDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m manufacturerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IManufacturerDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m manufacturerDo) Unscoped() IManufacturerDo {
	return m.withDO(m.DO.Unscoped())
}

func (m manufacturerDo) Create(values ...*model.Manufacturer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m manufacturerDo) CreateInBatches(values []*model.Manufacturer, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m manufacturerDo) Save(values ...*model.Manufacturer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m manufacturerDo) First() (*model.Manufacturer, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manufacturer), nil
	}
}

func (m manufacturerDo) Take() (*model.Manufacturer, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manufacturer), nil
	}
}

func (m manufacturerDo) Last() (*model.Manufacturer, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manufacturer), nil
	}
}

func (m manufacturerDo) Find() ([]*model.Manufacturer, error) {
	result, err := m.DO.Find()
	return result.([]*model.Manufacturer), err
}

func (m manufacturerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Manufacturer, err error) {
	buf := make([]*model.Manufacturer, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m manufacturerDo) FindInBatches(result *[]*model.Manufacturer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m manufacturerDo) Attrs(attrs ...field.AssignExpr) IManufacturerDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m manufacturerDo) Assign(attrs ...field.AssignExpr) IManufacturerDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m manufacturerDo) Joins(fields ...field.RelationField) IManufacturerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m manufacturerDo) Preload(fields ...field.RelationField) IManufacturerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m manufacturerDo) FirstOrInit() (*model.Manufacturer, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manufacturer), nil
	}
}

func (m manufacturerDo) FirstOrCreate() (*model.Manufacturer, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manufacturer), nil
	}
}

func (m manufacturerDo) FindByPage(offset int, limit int) (result []*model.Manufacturer, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m manufacturerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m manufacturerDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m manufacturerDo) Delete(models ...*model.Manufacturer) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *manufacturerDo) withDO(do gen.Dao) *manufacturerDo {
	m.DO = *do.(*gen.DO)
	return m
}
