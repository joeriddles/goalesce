// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joeriddles/goalesce/examples/multiple_files/model"
)

func newBio(db *gorm.DB, opts ...gen.DOOption) bio {
	_bio := bio{}

	_bio.bioDo.UseDB(db, opts...)
	_bio.bioDo.UseModel(&model.Bio{})

	tableName := _bio.bioDo.TableName()
	_bio.ALL = field.NewAsterisk(tableName)
	_bio.ID = field.NewUint(tableName, "id")
	_bio.CreatedAt = field.NewTime(tableName, "created_at")
	_bio.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bio.DeletedAt = field.NewField(tableName, "deleted_at")
	_bio.Description = field.NewString(tableName, "description")
	_bio.UserID = field.NewUint(tableName, "user_id")
	_bio.User = bioBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_bio.fillFieldMap()

	return _bio
}

type bio struct {
	bioDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Description field.String
	UserID      field.Uint
	User        bioBelongsToUser

	fieldMap map[string]field.Expr
}

func (b bio) Table(newTableName string) *bio {
	b.bioDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bio) As(alias string) *bio {
	b.bioDo.DO = *(b.bioDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bio) updateTableName(table string) *bio {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewUint(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.Description = field.NewString(table, "description")
	b.UserID = field.NewUint(table, "user_id")

	b.fillFieldMap()

	return b
}

func (b *bio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bio) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["description"] = b.Description
	b.fieldMap["user_id"] = b.UserID

}

func (b bio) clone(db *gorm.DB) bio {
	b.bioDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bio) replaceDB(db *gorm.DB) bio {
	b.bioDo.ReplaceDB(db)
	return b
}

type bioBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a bioBelongsToUser) Where(conds ...field.Expr) *bioBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a bioBelongsToUser) WithContext(ctx context.Context) *bioBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a bioBelongsToUser) Session(session *gorm.Session) *bioBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a bioBelongsToUser) Model(m *model.Bio) *bioBelongsToUserTx {
	return &bioBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type bioBelongsToUserTx struct{ tx *gorm.Association }

func (a bioBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a bioBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a bioBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a bioBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a bioBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a bioBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type bioDo struct{ gen.DO }

type IBioDo interface {
	gen.SubQuery
	Debug() IBioDo
	WithContext(ctx context.Context) IBioDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBioDo
	WriteDB() IBioDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBioDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBioDo
	Not(conds ...gen.Condition) IBioDo
	Or(conds ...gen.Condition) IBioDo
	Select(conds ...field.Expr) IBioDo
	Where(conds ...gen.Condition) IBioDo
	Order(conds ...field.Expr) IBioDo
	Distinct(cols ...field.Expr) IBioDo
	Omit(cols ...field.Expr) IBioDo
	Join(table schema.Tabler, on ...field.Expr) IBioDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBioDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBioDo
	Group(cols ...field.Expr) IBioDo
	Having(conds ...gen.Condition) IBioDo
	Limit(limit int) IBioDo
	Offset(offset int) IBioDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBioDo
	Unscoped() IBioDo
	Create(values ...*model.Bio) error
	CreateInBatches(values []*model.Bio, batchSize int) error
	Save(values ...*model.Bio) error
	First() (*model.Bio, error)
	Take() (*model.Bio, error)
	Last() (*model.Bio, error)
	Find() ([]*model.Bio, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bio, err error)
	FindInBatches(result *[]*model.Bio, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bio) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBioDo
	Assign(attrs ...field.AssignExpr) IBioDo
	Joins(fields ...field.RelationField) IBioDo
	Preload(fields ...field.RelationField) IBioDo
	FirstOrInit() (*model.Bio, error)
	FirstOrCreate() (*model.Bio, error)
	FindByPage(offset int, limit int) (result []*model.Bio, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBioDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bioDo) Debug() IBioDo {
	return b.withDO(b.DO.Debug())
}

func (b bioDo) WithContext(ctx context.Context) IBioDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bioDo) ReadDB() IBioDo {
	return b.Clauses(dbresolver.Read)
}

func (b bioDo) WriteDB() IBioDo {
	return b.Clauses(dbresolver.Write)
}

func (b bioDo) Session(config *gorm.Session) IBioDo {
	return b.withDO(b.DO.Session(config))
}

func (b bioDo) Clauses(conds ...clause.Expression) IBioDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bioDo) Returning(value interface{}, columns ...string) IBioDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bioDo) Not(conds ...gen.Condition) IBioDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bioDo) Or(conds ...gen.Condition) IBioDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bioDo) Select(conds ...field.Expr) IBioDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bioDo) Where(conds ...gen.Condition) IBioDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bioDo) Order(conds ...field.Expr) IBioDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bioDo) Distinct(cols ...field.Expr) IBioDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bioDo) Omit(cols ...field.Expr) IBioDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bioDo) Join(table schema.Tabler, on ...field.Expr) IBioDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bioDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBioDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bioDo) RightJoin(table schema.Tabler, on ...field.Expr) IBioDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bioDo) Group(cols ...field.Expr) IBioDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bioDo) Having(conds ...gen.Condition) IBioDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bioDo) Limit(limit int) IBioDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bioDo) Offset(offset int) IBioDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBioDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bioDo) Unscoped() IBioDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bioDo) Create(values ...*model.Bio) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bioDo) CreateInBatches(values []*model.Bio, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bioDo) Save(values ...*model.Bio) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bioDo) First() (*model.Bio, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bio), nil
	}
}

func (b bioDo) Take() (*model.Bio, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bio), nil
	}
}

func (b bioDo) Last() (*model.Bio, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bio), nil
	}
}

func (b bioDo) Find() ([]*model.Bio, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bio), err
}

func (b bioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bio, err error) {
	buf := make([]*model.Bio, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bioDo) FindInBatches(result *[]*model.Bio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bioDo) Attrs(attrs ...field.AssignExpr) IBioDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bioDo) Assign(attrs ...field.AssignExpr) IBioDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bioDo) Joins(fields ...field.RelationField) IBioDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bioDo) Preload(fields ...field.RelationField) IBioDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bioDo) FirstOrInit() (*model.Bio, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bio), nil
	}
}

func (b bioDo) FirstOrCreate() (*model.Bio, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bio), nil
	}
}

func (b bioDo) FindByPage(offset int, limit int) (result []*model.Bio, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bioDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bioDo) Delete(models ...*model.Bio) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bioDo) withDO(do gen.Dao) *bioDo {
	b.DO = *do.(*gen.DO)
	return b
}
