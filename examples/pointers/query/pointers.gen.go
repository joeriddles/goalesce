// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joeriddles/goalesce/examples/pointers/model"
)

func newPointer(db *gorm.DB, opts ...gen.DOOption) pointer {
	_pointer := pointer{}

	_pointer.pointerDo.UseDB(db, opts...)
	_pointer.pointerDo.UseModel(&model.Pointer{})

	tableName := _pointer.pointerDo.TableName()
	_pointer.ALL = field.NewAsterisk(tableName)
	_pointer.ID = field.NewInt(tableName, "id")
	_pointer.UserID = field.NewInt(tableName, "user_id")
	_pointer.UserPtrID = field.NewInt(tableName, "user_ptr_id")
	_pointer.User = pointerBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_pointer.UserPtr = pointerBelongsToUserPtr{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserPtr", "model.User"),
	}

	_pointer.Users = pointerManyToManyUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Users", "model.User"),
	}

	_pointer.PtrUsers = pointerManyToManyPtrUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PtrUsers", "model.User"),
	}

	_pointer.UserPtrs = pointerManyToManyUserPtrs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserPtrs", "model.User"),
	}

	_pointer.PtrUserPtrs = pointerManyToManyPtrUserPtrs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PtrUserPtrs", "model.User"),
	}

	_pointer.fillFieldMap()

	return _pointer
}

type pointer struct {
	pointerDo

	ALL       field.Asterisk
	ID        field.Int
	UserID    field.Int
	UserPtrID field.Int
	User      pointerBelongsToUser

	UserPtr pointerBelongsToUserPtr

	Users pointerManyToManyUsers

	PtrUsers pointerManyToManyPtrUsers

	UserPtrs pointerManyToManyUserPtrs

	PtrUserPtrs pointerManyToManyPtrUserPtrs

	fieldMap map[string]field.Expr
}

func (p pointer) Table(newTableName string) *pointer {
	p.pointerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pointer) As(alias string) *pointer {
	p.pointerDo.DO = *(p.pointerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pointer) updateTableName(table string) *pointer {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.UserID = field.NewInt(table, "user_id")
	p.UserPtrID = field.NewInt(table, "user_ptr_id")

	p.fillFieldMap()

	return p
}

func (p *pointer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pointer) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["user_ptr_id"] = p.UserPtrID

}

func (p pointer) clone(db *gorm.DB) pointer {
	p.pointerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pointer) replaceDB(db *gorm.DB) pointer {
	p.pointerDo.ReplaceDB(db)
	return p
}

type pointerBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerBelongsToUser) Where(conds ...field.Expr) *pointerBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerBelongsToUser) WithContext(ctx context.Context) *pointerBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerBelongsToUser) Session(session *gorm.Session) *pointerBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerBelongsToUser) Model(m *model.Pointer) *pointerBelongsToUserTx {
	return &pointerBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type pointerBelongsToUserTx struct{ tx *gorm.Association }

func (a pointerBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type pointerBelongsToUserPtr struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerBelongsToUserPtr) Where(conds ...field.Expr) *pointerBelongsToUserPtr {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerBelongsToUserPtr) WithContext(ctx context.Context) *pointerBelongsToUserPtr {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerBelongsToUserPtr) Session(session *gorm.Session) *pointerBelongsToUserPtr {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerBelongsToUserPtr) Model(m *model.Pointer) *pointerBelongsToUserPtrTx {
	return &pointerBelongsToUserPtrTx{a.db.Model(m).Association(a.Name())}
}

type pointerBelongsToUserPtrTx struct{ tx *gorm.Association }

func (a pointerBelongsToUserPtrTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerBelongsToUserPtrTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerBelongsToUserPtrTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerBelongsToUserPtrTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerBelongsToUserPtrTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerBelongsToUserPtrTx) Count() int64 {
	return a.tx.Count()
}

type pointerManyToManyUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerManyToManyUsers) Where(conds ...field.Expr) *pointerManyToManyUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerManyToManyUsers) WithContext(ctx context.Context) *pointerManyToManyUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerManyToManyUsers) Session(session *gorm.Session) *pointerManyToManyUsers {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerManyToManyUsers) Model(m *model.Pointer) *pointerManyToManyUsersTx {
	return &pointerManyToManyUsersTx{a.db.Model(m).Association(a.Name())}
}

type pointerManyToManyUsersTx struct{ tx *gorm.Association }

func (a pointerManyToManyUsersTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerManyToManyUsersTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerManyToManyUsersTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerManyToManyUsersTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerManyToManyUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerManyToManyUsersTx) Count() int64 {
	return a.tx.Count()
}

type pointerManyToManyPtrUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerManyToManyPtrUsers) Where(conds ...field.Expr) *pointerManyToManyPtrUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerManyToManyPtrUsers) WithContext(ctx context.Context) *pointerManyToManyPtrUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerManyToManyPtrUsers) Session(session *gorm.Session) *pointerManyToManyPtrUsers {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerManyToManyPtrUsers) Model(m *model.Pointer) *pointerManyToManyPtrUsersTx {
	return &pointerManyToManyPtrUsersTx{a.db.Model(m).Association(a.Name())}
}

type pointerManyToManyPtrUsersTx struct{ tx *gorm.Association }

func (a pointerManyToManyPtrUsersTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerManyToManyPtrUsersTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerManyToManyPtrUsersTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerManyToManyPtrUsersTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerManyToManyPtrUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerManyToManyPtrUsersTx) Count() int64 {
	return a.tx.Count()
}

type pointerManyToManyUserPtrs struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerManyToManyUserPtrs) Where(conds ...field.Expr) *pointerManyToManyUserPtrs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerManyToManyUserPtrs) WithContext(ctx context.Context) *pointerManyToManyUserPtrs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerManyToManyUserPtrs) Session(session *gorm.Session) *pointerManyToManyUserPtrs {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerManyToManyUserPtrs) Model(m *model.Pointer) *pointerManyToManyUserPtrsTx {
	return &pointerManyToManyUserPtrsTx{a.db.Model(m).Association(a.Name())}
}

type pointerManyToManyUserPtrsTx struct{ tx *gorm.Association }

func (a pointerManyToManyUserPtrsTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerManyToManyUserPtrsTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerManyToManyUserPtrsTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerManyToManyUserPtrsTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerManyToManyUserPtrsTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerManyToManyUserPtrsTx) Count() int64 {
	return a.tx.Count()
}

type pointerManyToManyPtrUserPtrs struct {
	db *gorm.DB

	field.RelationField
}

func (a pointerManyToManyPtrUserPtrs) Where(conds ...field.Expr) *pointerManyToManyPtrUserPtrs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointerManyToManyPtrUserPtrs) WithContext(ctx context.Context) *pointerManyToManyPtrUserPtrs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointerManyToManyPtrUserPtrs) Session(session *gorm.Session) *pointerManyToManyPtrUserPtrs {
	a.db = a.db.Session(session)
	return &a
}

func (a pointerManyToManyPtrUserPtrs) Model(m *model.Pointer) *pointerManyToManyPtrUserPtrsTx {
	return &pointerManyToManyPtrUserPtrsTx{a.db.Model(m).Association(a.Name())}
}

type pointerManyToManyPtrUserPtrsTx struct{ tx *gorm.Association }

func (a pointerManyToManyPtrUserPtrsTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pointerManyToManyPtrUserPtrsTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointerManyToManyPtrUserPtrsTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointerManyToManyPtrUserPtrsTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointerManyToManyPtrUserPtrsTx) Clear() error {
	return a.tx.Clear()
}

func (a pointerManyToManyPtrUserPtrsTx) Count() int64 {
	return a.tx.Count()
}

type pointerDo struct{ gen.DO }

type IPointerDo interface {
	gen.SubQuery
	Debug() IPointerDo
	WithContext(ctx context.Context) IPointerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPointerDo
	WriteDB() IPointerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPointerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPointerDo
	Not(conds ...gen.Condition) IPointerDo
	Or(conds ...gen.Condition) IPointerDo
	Select(conds ...field.Expr) IPointerDo
	Where(conds ...gen.Condition) IPointerDo
	Order(conds ...field.Expr) IPointerDo
	Distinct(cols ...field.Expr) IPointerDo
	Omit(cols ...field.Expr) IPointerDo
	Join(table schema.Tabler, on ...field.Expr) IPointerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPointerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPointerDo
	Group(cols ...field.Expr) IPointerDo
	Having(conds ...gen.Condition) IPointerDo
	Limit(limit int) IPointerDo
	Offset(offset int) IPointerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPointerDo
	Unscoped() IPointerDo
	Create(values ...*model.Pointer) error
	CreateInBatches(values []*model.Pointer, batchSize int) error
	Save(values ...*model.Pointer) error
	First() (*model.Pointer, error)
	Take() (*model.Pointer, error)
	Last() (*model.Pointer, error)
	Find() ([]*model.Pointer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pointer, err error)
	FindInBatches(result *[]*model.Pointer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Pointer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPointerDo
	Assign(attrs ...field.AssignExpr) IPointerDo
	Joins(fields ...field.RelationField) IPointerDo
	Preload(fields ...field.RelationField) IPointerDo
	FirstOrInit() (*model.Pointer, error)
	FirstOrCreate() (*model.Pointer, error)
	FindByPage(offset int, limit int) (result []*model.Pointer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPointerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pointerDo) Debug() IPointerDo {
	return p.withDO(p.DO.Debug())
}

func (p pointerDo) WithContext(ctx context.Context) IPointerDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pointerDo) ReadDB() IPointerDo {
	return p.Clauses(dbresolver.Read)
}

func (p pointerDo) WriteDB() IPointerDo {
	return p.Clauses(dbresolver.Write)
}

func (p pointerDo) Session(config *gorm.Session) IPointerDo {
	return p.withDO(p.DO.Session(config))
}

func (p pointerDo) Clauses(conds ...clause.Expression) IPointerDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pointerDo) Returning(value interface{}, columns ...string) IPointerDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pointerDo) Not(conds ...gen.Condition) IPointerDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pointerDo) Or(conds ...gen.Condition) IPointerDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pointerDo) Select(conds ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pointerDo) Where(conds ...gen.Condition) IPointerDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pointerDo) Order(conds ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pointerDo) Distinct(cols ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pointerDo) Omit(cols ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pointerDo) Join(table schema.Tabler, on ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pointerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPointerDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pointerDo) RightJoin(table schema.Tabler, on ...field.Expr) IPointerDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pointerDo) Group(cols ...field.Expr) IPointerDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pointerDo) Having(conds ...gen.Condition) IPointerDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pointerDo) Limit(limit int) IPointerDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pointerDo) Offset(offset int) IPointerDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pointerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPointerDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pointerDo) Unscoped() IPointerDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pointerDo) Create(values ...*model.Pointer) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pointerDo) CreateInBatches(values []*model.Pointer, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pointerDo) Save(values ...*model.Pointer) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pointerDo) First() (*model.Pointer, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pointer), nil
	}
}

func (p pointerDo) Take() (*model.Pointer, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pointer), nil
	}
}

func (p pointerDo) Last() (*model.Pointer, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pointer), nil
	}
}

func (p pointerDo) Find() ([]*model.Pointer, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pointer), err
}

func (p pointerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pointer, err error) {
	buf := make([]*model.Pointer, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pointerDo) FindInBatches(result *[]*model.Pointer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pointerDo) Attrs(attrs ...field.AssignExpr) IPointerDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pointerDo) Assign(attrs ...field.AssignExpr) IPointerDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pointerDo) Joins(fields ...field.RelationField) IPointerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pointerDo) Preload(fields ...field.RelationField) IPointerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pointerDo) FirstOrInit() (*model.Pointer, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pointer), nil
	}
}

func (p pointerDo) FirstOrCreate() (*model.Pointer, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pointer), nil
	}
}

func (p pointerDo) FindByPage(offset int, limit int) (result []*model.Pointer, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pointerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pointerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pointerDo) Delete(models ...*model.Pointer) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pointerDo) withDO(do gen.Dao) *pointerDo {
	p.DO = *do.(*gen.DO)
	return p
}
