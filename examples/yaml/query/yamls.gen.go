// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joeriddles/goalesce/examples/yaml/model"
)

func newYaml(db *gorm.DB, opts ...gen.DOOption) yaml {
	_yaml := yaml{}

	_yaml.yamlDo.UseDB(db, opts...)
	_yaml.yamlDo.UseModel(&model.Yaml{})

	tableName := _yaml.yamlDo.TableName()
	_yaml.ALL = field.NewAsterisk(tableName)
	_yaml.ID = field.NewUint(tableName, "id")
	_yaml.CreatedAt = field.NewTime(tableName, "created_at")
	_yaml.UpdatedAt = field.NewTime(tableName, "updated_at")
	_yaml.DeletedAt = field.NewField(tableName, "deleted_at")
	_yaml.Name = field.NewString(tableName, "name")

	_yaml.fillFieldMap()

	return _yaml
}

type yaml struct {
	yamlDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String

	fieldMap map[string]field.Expr
}

func (y yaml) Table(newTableName string) *yaml {
	y.yamlDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y yaml) As(alias string) *yaml {
	y.yamlDo.DO = *(y.yamlDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *yaml) updateTableName(table string) *yaml {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewUint(table, "id")
	y.CreatedAt = field.NewTime(table, "created_at")
	y.UpdatedAt = field.NewTime(table, "updated_at")
	y.DeletedAt = field.NewField(table, "deleted_at")
	y.Name = field.NewString(table, "name")

	y.fillFieldMap()

	return y
}

func (y *yaml) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *yaml) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 5)
	y.fieldMap["id"] = y.ID
	y.fieldMap["created_at"] = y.CreatedAt
	y.fieldMap["updated_at"] = y.UpdatedAt
	y.fieldMap["deleted_at"] = y.DeletedAt
	y.fieldMap["name"] = y.Name
}

func (y yaml) clone(db *gorm.DB) yaml {
	y.yamlDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y yaml) replaceDB(db *gorm.DB) yaml {
	y.yamlDo.ReplaceDB(db)
	return y
}

type yamlDo struct{ gen.DO }

type IYamlDo interface {
	gen.SubQuery
	Debug() IYamlDo
	WithContext(ctx context.Context) IYamlDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYamlDo
	WriteDB() IYamlDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYamlDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYamlDo
	Not(conds ...gen.Condition) IYamlDo
	Or(conds ...gen.Condition) IYamlDo
	Select(conds ...field.Expr) IYamlDo
	Where(conds ...gen.Condition) IYamlDo
	Order(conds ...field.Expr) IYamlDo
	Distinct(cols ...field.Expr) IYamlDo
	Omit(cols ...field.Expr) IYamlDo
	Join(table schema.Tabler, on ...field.Expr) IYamlDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYamlDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYamlDo
	Group(cols ...field.Expr) IYamlDo
	Having(conds ...gen.Condition) IYamlDo
	Limit(limit int) IYamlDo
	Offset(offset int) IYamlDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYamlDo
	Unscoped() IYamlDo
	Create(values ...*model.Yaml) error
	CreateInBatches(values []*model.Yaml, batchSize int) error
	Save(values ...*model.Yaml) error
	First() (*model.Yaml, error)
	Take() (*model.Yaml, error)
	Last() (*model.Yaml, error)
	Find() ([]*model.Yaml, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Yaml, err error)
	FindInBatches(result *[]*model.Yaml, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Yaml) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYamlDo
	Assign(attrs ...field.AssignExpr) IYamlDo
	Joins(fields ...field.RelationField) IYamlDo
	Preload(fields ...field.RelationField) IYamlDo
	FirstOrInit() (*model.Yaml, error)
	FirstOrCreate() (*model.Yaml, error)
	FindByPage(offset int, limit int) (result []*model.Yaml, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYamlDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y yamlDo) Debug() IYamlDo {
	return y.withDO(y.DO.Debug())
}

func (y yamlDo) WithContext(ctx context.Context) IYamlDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y yamlDo) ReadDB() IYamlDo {
	return y.Clauses(dbresolver.Read)
}

func (y yamlDo) WriteDB() IYamlDo {
	return y.Clauses(dbresolver.Write)
}

func (y yamlDo) Session(config *gorm.Session) IYamlDo {
	return y.withDO(y.DO.Session(config))
}

func (y yamlDo) Clauses(conds ...clause.Expression) IYamlDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y yamlDo) Returning(value interface{}, columns ...string) IYamlDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y yamlDo) Not(conds ...gen.Condition) IYamlDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y yamlDo) Or(conds ...gen.Condition) IYamlDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y yamlDo) Select(conds ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y yamlDo) Where(conds ...gen.Condition) IYamlDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y yamlDo) Order(conds ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y yamlDo) Distinct(cols ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y yamlDo) Omit(cols ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y yamlDo) Join(table schema.Tabler, on ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y yamlDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYamlDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y yamlDo) RightJoin(table schema.Tabler, on ...field.Expr) IYamlDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y yamlDo) Group(cols ...field.Expr) IYamlDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y yamlDo) Having(conds ...gen.Condition) IYamlDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y yamlDo) Limit(limit int) IYamlDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y yamlDo) Offset(offset int) IYamlDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y yamlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYamlDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y yamlDo) Unscoped() IYamlDo {
	return y.withDO(y.DO.Unscoped())
}

func (y yamlDo) Create(values ...*model.Yaml) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y yamlDo) CreateInBatches(values []*model.Yaml, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y yamlDo) Save(values ...*model.Yaml) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y yamlDo) First() (*model.Yaml, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Yaml), nil
	}
}

func (y yamlDo) Take() (*model.Yaml, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Yaml), nil
	}
}

func (y yamlDo) Last() (*model.Yaml, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Yaml), nil
	}
}

func (y yamlDo) Find() ([]*model.Yaml, error) {
	result, err := y.DO.Find()
	return result.([]*model.Yaml), err
}

func (y yamlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Yaml, err error) {
	buf := make([]*model.Yaml, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y yamlDo) FindInBatches(result *[]*model.Yaml, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y yamlDo) Attrs(attrs ...field.AssignExpr) IYamlDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y yamlDo) Assign(attrs ...field.AssignExpr) IYamlDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y yamlDo) Joins(fields ...field.RelationField) IYamlDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y yamlDo) Preload(fields ...field.RelationField) IYamlDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y yamlDo) FirstOrInit() (*model.Yaml, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Yaml), nil
	}
}

func (y yamlDo) FirstOrCreate() (*model.Yaml, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Yaml), nil
	}
}

func (y yamlDo) FindByPage(offset int, limit int) (result []*model.Yaml, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y yamlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y yamlDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y yamlDo) Delete(models ...*model.Yaml) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *yamlDo) withDO(do gen.Dao) *yamlDo {
	y.DO = *do.(*gen.DO)
	return y
}
