// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	"gorm.io/gorm"

  model "{{.pkg}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
	"github.com/joeriddles/goalesce/pkg/utils"
)

type {{.Name}}Mapper interface {
  Map(src model.{{.dst.Name}}) {{Types}}{{.dst.Name}}
	MapSlice(srcs []model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapPtr(src *model.{{.dst.Name}}) *{{Types}}{{.dst.Name}}
	MapPtrSlice(srcs *[]model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapSlicePtrs(srcs []*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapPtrSlicePtrs(srcs *[]*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
}

type {{.Name|ToCamelCase}}Mapper struct {}

func New{{.Name}}Mapper() {{.Name}}Mapper {
  return &{{.Name|ToCamelCase}}Mapper{}
}

func (m *{{.Name|ToCamelCase}}Mapper) Map(src model.{{.dst.Name}}) {{Types}}{{.dst.Name}} {
  dst := &{{Types}}{{.dst.Name}}{}
  {{range .src.AllFields}}
  {{.|ConvertToApi}}
  {{end}}
	return *dst
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlice(srcs []model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	dsts := []{{Types}}{{.dst.Name}}{}
	for _, src := range srcs {
		dst := m.Map(src)
		dsts = append(dsts, dst)
	}
	return &dsts
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtr(src *model.{{.dst.Name}}) *{{Types}}{{.dst.Name}} {
	if src == nil {
		return nil
	}
	dst := m.Map(*src)
	return &dst
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlice(srcs *[]model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	dsts := m.MapSlice(*srcs)
	return dsts
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlicePtrs(srcs []*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	dsts := []{{Types}}{{.dst.Name}}{}
	for _, src := range srcs {
		dstPtr := m.MapPtr(src)
		dsts = append(dsts, *dstPtr)
	}
	return &dsts
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlicePtrs(srcs *[]*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	return m.MapSlicePtrs(*srcs)
}
