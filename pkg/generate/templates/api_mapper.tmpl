// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	"gorm.io/gorm"

  model "{{.pkg}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
	"github.com/joeriddles/goalesce/pkg/utils"
)

type {{.Name}}Mapper interface {
  Map(model model.{{.dst.Name}}) {{Types}}{{.dst.Name}}
	MapSlice(models []model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapPtr(model *model.{{.dst.Name}}) *{{Types}}{{.dst.Name}}
	MapPtrSlice(models *[]model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapSlicePtrs(models []*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
	MapPtrSlicePtrs(models *[]*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}}
}

type {{.Name|ToCamelCase}}Mapper struct {}

func New{{.Name}}Mapper() {{.Name}}Mapper {
  return &{{.Name|ToCamelCase}}Mapper{}
}

func (m *{{.Name|ToCamelCase}}Mapper) Map(model model.{{.dst.Name}}) {{Types}}{{.dst.Name}} {
  obj := &{{Types}}{{.dst.Name}}{}
  {{range .src.AllFields}}
  {{.|ConvertToApi}}
  {{end}}
	return *obj
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlice(models []model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	objs := []{{Types}}{{.dst.Name}}{}
	for _, model := range models {
		obj := m.Map(model)
		objs = append(objs, obj)
	}
	return &objs
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtr(model *model.{{.dst.Name}}) *{{Types}}{{.dst.Name}} {
	if model == nil {
		return nil
	}
	obj := m.Map(*model)
	return &obj
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlice(models *[]model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	objs := m.MapSlice(*models)
	return objs
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlicePtrs(models []*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	objs := []{{Types}}{{.dst.Name}}{}
	for _, model := range models {
		objPtr := m.MapPtr(model)
		objs = append(objs, *objPtr)
	}
	return &objs
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlicePtrs(models *[]*model.{{.dst.Name}}) *[]{{Types}}{{.dst.Name}} {
	return m.MapSlicePtrs(*models)
}
