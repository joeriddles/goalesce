// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	{{if .model.IsGormModelEmbedded}}"gorm.io/gorm"{{end}}
  model "{{.pkg}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
  "github.com/joeriddles/goalesce/pkg/automapper"
)

type {{.model.Name}}Mapper interface {
  MapToModel(obj {{Types}}{{.model.Name}}) (*model.{{.model.Name}}, error)
  MapToApi(model model.{{.model.Name}}) (*{{Types}}{{.model.Name}}, error)
  MapCreate(obj {{Types}}Create{{.model.Name}}) (*model.{{.model.Name}}, error)
  MapUpdate(obj {{Types}}Update{{.model.Name}}) (map[string]interface{}, error)
}

type {{.model.Name|ToCamelCase}}Mapper struct {
  automapper       automapper.AutoMapper[model.{{.model.Name}}, {{Types}}{{.model.Name}}]
  createAutomapper automapper.AutoMapper[model.{{.model.Name}}, {{Types}}Create{{.model.Name}}]
  modelMapper      _Mapper
	updateMapper     _Mapper
}

func New{{.model.Name}}Mapper() {{.model.Name}}Mapper {
  return &{{.model.Name|ToCamelCase}}Mapper{
    automapper:       automapper.NewAutoMapper(model.{{.model.Name}}{}, {{Types}}{{.model.Name}}{}),
    createAutomapper: automapper.NewAutoMapper(model.{{.model.Name}}{}, {{Types}}Create{{.model.Name}}{}),
    modelMapper:      _NewModelMapper(),
		updateMapper:     _NewUpdateMapper(),
  }
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToModel(obj {{Types}}{{.model.Name}}) (*model.{{.model.Name}}, error) {
  model := &model.{{.model.Name}}{}
	err := m.automapper.MapFrom(&obj, model)
	return model, err
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToApi(model model.{{.model.Name}}) (*{{Types}}{{.model.Name}}, error) {
  result := &{{Types}}{{.model.Name}}{}
	err := m.automapper.MapTo(&model, result)
	return result, err
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapCreate(obj {{Types}}Create{{.model.Name}}) (*model.{{.model.Name}}, error) {
	model := &model.{{.model.Name}}{} // TODO: use automapper
  err := m.createAutomapper.MapFrom(&obj, model)
	return model, err
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapUpdate(obj {{Types}}Update{{.model.Name}}) (map[string]interface{}, error) {
	update := &map[string]interface{}{} // TODO: use automapper
	if err := m.updateMapper.Map(obj, update); err != nil {
    return nil, err
  }
	return *update, nil
}
