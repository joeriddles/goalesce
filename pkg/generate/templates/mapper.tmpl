// Code generated by github.com/joeriddles/gorm-oapi-codegen DO NOT EDIT.
package api

import (
  model "github.com/joeriddles/gorm-oapi-codegen/examples/cars" // TODO(joeriddle): make this dynamic
	"gorm.io/gorm"
)

type {{.Name}}Mapper interface {
  MapToModel(obj {{.Name}}) (*model.{{.Name}}, error)
  MapToApi(model{{.Name}} model.{{.Name}}) (*{{.Name}}, error)
  MapCreate(obj Create{{.Name}}) (*model.{{.Name}}, error)
  MapUpdate(obj Update{{.Name}}) (map[string]interface{}, error)
}

type _{{.Name}}Mapper struct {
}

func New{{.Name}}Mapper() {{.Name}}Mapper {
  return &_{{.Name}}Mapper{}
}

func (m *_{{.Name}}Mapper) MapToModel(obj {{.Name}}) (*model.{{.Name}}, error) {
  return &model.{{.Name}}{
    Model: gorm.Model{ID: uint(obj.Id)},
    {{range .Fields}}{{if IsSimpleType .Type}}{{.Name}}: {{if IsId .Name}}uint(obj.{{.Name|ToPascalCase}}){{else}}obj.{{.Name|ToPascalCase}}{{end}},{{end}}
    {{end}}
  }, nil
}

func (m *_{{.Name}}Mapper) MapToApi(model{{.Name}} model.{{.Name}}) (*{{.Name}}, error) {
  return nil, nil
}

func (m *_{{.Name}}Mapper) MapCreate(obj Create{{.Name}}) (*model.{{.Name}}, error) {
  return nil, nil
}

func (m *_{{.Name}}Mapper) MapUpdate(obj Update{{.Name}}) (map[string]interface{}, error) {
  return nil, nil
}

