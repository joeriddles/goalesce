// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	"gorm.io/gorm"

  model "{{.pkg}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
)

type {{.model.Name}}Mapper interface {
  MapToModel(obj {{Types}}{{.model.Name}}) model.{{.model.Name}}
	MapToModels(objs []{{Types}}{{.model.Name}}) []model.{{.model.Name}}
  MapToApi(model model.{{.model.Name}}) {{Types}}{{.model.Name}}
	MapToApis(models []model.{{.model.Name}}) *[]{{Types}}{{.model.Name}}

	MapToModelPtr(obj *{{Types}}{{.model.Name}}) *model.{{.model.Name}}
	MapToModelsPtr(objs []{{Types}}{{.model.Name}}) []*model.{{.model.Name}}
  MapToApiPtr(model *model.{{.model.Name}}) *{{Types}}{{.model.Name}}
	MapToApisPtr(models []model.{{.model.Name}}) *[]*{{Types}}{{.model.Name}}
}

type {{.model.Name|ToCamelCase}}Mapper struct {}

func New{{.model.Name}}Mapper() {{.model.Name}}Mapper {
  return &{{.model.Name|ToCamelCase}}Mapper{}
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToModel(obj {{Types}}{{.model.Name}}) model.{{.model.Name}} {
  model := &model.{{.model.Name}}{}
  {{range .api.Fields}}
  {{.|ConvertToModel}}
  {{end}}
	return *model
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToModels(objs []{{Types}}{{.model.Name}}) []model.{{.model.Name}} {
	models := []model.{{.model.Name}}{}
	for _, obj := range objs {
		model := m.MapToModel(obj)
		models = append(models, model)
	}
	return models
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToApi(model model.{{.model.Name}}) {{Types}}{{.model.Name}} {
  obj := &{{Types}}{{.model.Name}}{}
	{{range .model.Fields}}
  {{.|ConvertToApi}}
  {{end}}{{range .model.Embedded}}{{range .Fields}}
  {{.|ConvertToApi}}
  {{end}}{{end}}
	return *obj
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToApis(models []model.{{.model.Name}}) *[]{{Types}}{{.model.Name}} {
	objs := []{{Types}}{{.model.Name}}{}
	for _, model := range models {
		obj := m.MapToApi(model)
		objs = append(objs, obj)
	}
	return &objs
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToModelPtr(obj *{{Types}}{{.model.Name}}) *model.{{.model.Name}} {
	model := m.MapToModel(*obj)
	return &model
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToModelsPtr(objs []{{Types}}{{.model.Name}}) []*model.{{.model.Name}} {
	models := m.MapToModels(objs)
	modelPtrs := []*model.{{.model.Name}}{}
	for _, obj := range models {
		modelPtrs = append(modelPtrs, &obj)
	}
	return modelPtrs
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToApiPtr(model *model.{{.model.Name}}) *{{Types}}{{.model.Name}} {
	obj := m.MapToApi(*model)
	return &obj
	
}

func (m *{{.model.Name|ToCamelCase}}Mapper) MapToApisPtr(models []model.{{.model.Name}}) *[]*{{Types}}{{.model.Name}} {
	objs := m.MapToApis(models)
	objPtrs := []*{{Types}}{{.model.Name}}{}
	for _, obj := range *objs {
		objPtrs = append(objPtrs, &obj)
	}
	return &objPtrs
}
