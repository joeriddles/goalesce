// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	"gorm.io/gorm"
	model "{{.pkg}}"
	{{if .typesPackage}}types "{{.typesPackage}}"{{end}}
	"github.com/joeriddles/goalesce/pkg/utils"
)

type {{.Name}}Mapper interface {
	Map(src {{Types}}{{.dst.Name}}) model.{{.dst.Name}}
	MapSlice(srcs *[]{{Types}}{{.dst.Name}}) []model.{{.dst.Name}}
	MapPtr(src *{{Types}}{{.dst.Name}}) *model.{{.dst.Name}}
	MapPtrSlice(srcs *[]{{Types}}{{.dst.Name}}) *[]model.{{.dst.Name}}
	MapSlicePtrs(srcs *[]{{Types}}{{.dst.Name}}) []*model.{{.dst.Name}}
	MapPtrSlicePtrs(srcs *[]{{Types}}{{.dst.Name}}) *[]*model.{{.dst.Name}}
}

type {{.Name|ToCamelCase}}Mapper struct {}

func New{{.Name}}Mapper() {{.Name}}Mapper {
	return &{{.Name|ToCamelCase}}Mapper{}
}

func (m *{{.Name|ToCamelCase}}Mapper) Map(src {{Types}}{{.dst.Name}}) model.{{.dst.Name}} {
	dst := &model.{{.dst.Name}}{}
	{{- range .src.Fields}}
	{{.|ConvertToModel}}
	{{- end}}
	return *dst
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlice(srcs *[]{{Types}}{{.dst.Name}}) []model.{{.dst.Name}} {
	dsts := []model.{{.dst.Name}}{}
	if srcs == nil {
		return dsts
	}
	for _, src := range *srcs {
		dst := m.Map(src)
		dsts = append(dsts, dst)
	}
	return dsts
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtr(src *{{Types}}{{.dst.Name}}) *model.{{.dst.Name}} {
	if src == nil {
		return nil
	}
	dst := m.Map(*src)
	return &dst
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlice(srcs *[]{{Types}}{{.dst.Name}}) *[]model.{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	dst := m.MapSlice(srcs)
	return &dst
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlicePtrs(srcs *[]{{Types}}{{.dst.Name}}) []*model.{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	dst := m.MapSlice(srcs)
	dstPtrs := []*model.{{.dst.Name}}{}
	for _, src := range dst {
		dstPtrs = append(dstPtrs, &src)
	}
	return dstPtrs
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlicePtrs(srcs *[]{{Types}}{{.dst.Name}}) *[]*model.{{.dst.Name}} {
	if srcs == nil {
		return nil
	}
	dst := m.MapSlicePtrs(srcs)
	return &dst
}
