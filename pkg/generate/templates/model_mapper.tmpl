// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package {{.package}}

import (
	"gorm.io/gorm"

  model "{{.pkg}}"
  {{if .typesPackage}}types "{{.typesPackage}}"{{end}}
	"github.com/joeriddles/goalesce/pkg/utils"
)

type {{.Name}}Mapper interface {
  Map(obj {{Types}}{{.dst.Name}}) model.{{.dst.Name}}
	MapSlice(objs *[]{{Types}}{{.dst.Name}}) []model.{{.dst.Name}}
	MapPtr(obj *{{Types}}{{.dst.Name}}) *model.{{.dst.Name}}
	MapPtrSlice(objs *[]{{Types}}{{.dst.Name}}) *[]model.{{.dst.Name}}
	MapSlicePtrs(objs *[]{{Types}}{{.dst.Name}}) []*model.{{.dst.Name}}
	MapPtrSlicePtrs(objs *[]{{Types}}{{.dst.Name}}) *[]*model.{{.dst.Name}}
}

type {{.Name|ToCamelCase}}Mapper struct {}

func New{{.Name}}Mapper() {{.Name}}Mapper {
  return &{{.Name|ToCamelCase}}Mapper{}
}

func (m *{{.Name|ToCamelCase}}Mapper) Map(obj {{Types}}{{.dst.Name}}) model.{{.dst.Name}} {
  model := &model.{{.dst.Name}}{}
  {{range .src.Fields}}
  {{.|ConvertToModel}}
  {{end}}
	return *model
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlice(objs *[]{{Types}}{{.dst.Name}}) []model.{{.dst.Name}} {
	models := []model.{{.dst.Name}}{}
	for _, obj := range *objs {
		model := m.Map(obj)
		models = append(models, model)
	}
	return models
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtr(obj *{{Types}}{{.dst.Name}}) *model.{{.dst.Name}} {
	model := m.Map(*obj)
	return &model
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlice(objs *[]{{Types}}{{.dst.Name}}) *[]model.{{.dst.Name}} {
	models := m.MapSlice(objs)
	return &models
}

func (m *{{.Name|ToCamelCase}}Mapper) MapSlicePtrs(objs *[]{{Types}}{{.dst.Name}}) []*model.{{.dst.Name}} {
	models := m.MapSlice(objs)
	modelPtrs := []*model.{{.dst.Name}}{}
	for _, obj := range models {
		modelPtrs = append(modelPtrs, &obj)
	}
	return modelPtrs
}

func (m *{{.Name|ToCamelCase}}Mapper) MapPtrSlicePtrs(objs *[]{{Types}}{{.dst.Name}}) *[]*model.{{.dst.Name}} {
	models := m.MapSlicePtrs(objs)
	return &models
}
