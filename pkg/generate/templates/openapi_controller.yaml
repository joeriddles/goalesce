# Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
paths:
  /:
    get:
      tags:
        - "{{.Name|ToSnakeCase}}"
      summary: Get all {{.Name}}s
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/{{.Name}}'
    post:
      tags:
        - "{{.Name|ToSnakeCase}}"
      summary: Create a new {{.Name}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create{{.Name}}'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/{{.Name}}'
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
  /{id}/:
    get:
      tags:
        - "{{.Name|ToSnakeCase}}"
      summary: Get a {{.Name}} by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{.Name}}'
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "{{.Name|ToSnakeCase}}"
      summary: Update a {{.Name}} by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update{{.Name}}"
      responses:
        "204":
          description: Updated
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - "{{.Name|ToSnakeCase}}"
      summary: Delete a {{.Name}} by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/id"
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    {{.Name}}:
      type: object
      properties:
        {{range .Fields}}{{.Name|ToSnakeCase}}:{{with  .|ToOpenApiType}}
          {{if ne .Ref nil}}$ref: {{.Ref}}{{else}}type: {{.Type}}{{end}}{{if .Format}}
          format: {{.Format}}{{end}}{{if .Nullable}}
          nullable: true{{end}}{{if ne .Items nil}}
          items:
            {{range $key, $value := .Items}}{{$key}}: "{{$value}}"{{end}}
          {{end}}{{end}}
        {{end}}{{range .Embedded}}{{range .Fields}}{{.Name|ToSnakeCase}}:{{with  .|ToOpenApiType}}
          {{if ne .Ref nil}}$ref: {{.Ref}}{{else}}type: {{.Type}}{{end}}{{if .Format}}
          format: {{.Format}}{{end}}{{if .Nullable}}
          nullable: true{{end}}{{if ne .Items nil}}
          items:
            {{range $key, $value := .Items}}{{$key}}: "{{$value}}"{{end}}
          {{end}}{{end}}
        {{end}}{{end}}
      required:
        {{range .Fields}}{{if Not (IsNullable .Type)}}- {{.Name|ToSnakeCase}}{{end}}
        {{end}}
        {{range .Embedded}}{{range .Fields}}{{if Not (IsNullable .Type)}}- {{.Name|ToSnakeCase}}{{end}}
        {{end}}{{end}}
    Create{{.Name}}:
      type: object
      properties:
        {{range .Fields}}{{.Name|ToSnakeCase}}:{{with  .|ToOpenApiType}}
          {{if ne .Ref nil}}$ref: {{.Ref}}{{else}}type: {{.Type}}{{end}}{{if .Format}}
          format: {{.Format}}{{end}}{{if .Nullable}}
          nullable: true{{end}}{{if ne .Items nil}}
          items:
            {{range $key, $value := .Items}}{{$key}}: "{{$value}}"{{end}}
          {{end}}{{end}}
        {{end}}
      required:
        {{range .Fields}}{{if Not (IsNullable .Type)}}- {{.Name|ToSnakeCase}}{{end}}
        {{end}}
    Update{{.Name}}:
      type: object
      properties:
        {{range .Fields}}{{if .|ShouldExcludeField}}{{continue}}{{end}}{{.Name|ToSnakeCase}}:{{with  .|ToOpenApiType}}
          {{if ne .Ref nil}}$ref: {{.Ref}}{{else}}type: {{.Type}}{{end}}{{if .Format}}
          format: {{.Format}}{{end}}{{if .Nullable}}
          nullable: true{{end}}{{if ne .Items nil}}
          items:
            {{range $key, $value := .Items}}{{$key}}: "{{$value}}"{{end}}
          {{end}}{{end}}
        {{end}}{{range .Embedded}}{{range .Fields}}{{if .|ShouldExcludeField}}{{continue}}{{end}}{{.Name|ToSnakeCase}}:{{with  .|ToOpenApiType}}
          {{if ne .Ref nil}}$ref: {{.Ref}}{{else}}type: {{.Type}}{{end}}{{if .Format}}
          format: {{.Format}}{{end}}{{if .Nullable}}
          nullable: true{{end}}{{if ne .Items nil}}
          items:
            {{range $key, $value := .Items}}{{$key}}: "{{$value}}"{{end}}
          {{end}}{{end}}
        {{end}}{{end}}
      required:
        {{range .Fields}}{{if .|ShouldExcludeField}}{{continue}}{{end}}{{if Not (IsNullable .Type)}}- {{.Name|ToSnakeCase}}{{end}}
        {{end}}
        {{range .Embedded}}{{range .Fields}}{{if .|ShouldExcludeField}}{{continue}}{{end}}{{if Not (IsNullable .Type)}}- {{.Name|ToSnakeCase}}{{end}}
        {{end}}{{end}}
    id:
      type: integer
      format: int64
      description: A unique id to represent a resource
      minimum: 0
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: The error code's unique identifier
        message:
          type: string
          description: The error code's detailed message providing information about itself
      required:
        - code
        - message
  parameters:
    IdPath:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"
  responses:
    # 400
    BadRequest:
      description: "Bad request - Contents of the request are unexpected"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    # 401
    Unauthorized:
      description: "Unauthorized - Invalid app check token, bearer token, or scope"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    # 403
    Forbidden:
      description: "Forbidden - No permission to access the resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    # 404
    NotFound:
      description: "Not Found - Specified resource could not be located"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    # 409
    Conflict:
      description: "Conflict - Operation would result in resource conflicts"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
