// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package repository

import (
	"context"
	model "{{.pkg}}"
	query "{{.queryPkg}}"
)

type {{.model.Name}}Filter struct {
	{{range .model.Fields -}}
	{{- with  .|ToOpenApiType}}{{if not .IsSimpleType}}{{continue}}{{end}}{{end -}}
	{{.Name}} {{.|GetGormQueryType|ToPtr}} `json:"{{.Name|ToSnakeCase}},omitempty"`
	{{end}}
}

type {{.model.Name}}Repository interface {
	List(
		ctx context.Context,
		filters *{{.model.Name}}Filter,
	) ([]*model.{{.model.Name}}, error)

	Get(
		ctx context.Context,
		id int64,
	) (*model.{{.model.Name}}, error)
	
	Create(
		ctx context.Context,
		{{.model.Name|ToCamelCase}} model.{{.model.Name}},
	) (*model.{{.model.Name}}, error)
	
	Update(
		ctx context.Context,
		id int64,
		update model.{{.model.Name}},
	) (*model.{{.model.Name}}, error)
	
	Delete(
		ctx context.Context,
		id int64,
	) error
}

type {{.model.Name|ToCamelCase}}Repository struct {
	query *query.Query
}

func New{{.model.Name}}Repository(query *query.Query) {{.model.Name}}Repository {
	return &{{.model.Name|ToCamelCase}}Repository{
		query: query,
	}
}

func (r *{{.model.Name|ToCamelCase}}Repository) List(
	ctx context.Context,
	filters *{{.model.Name}}Filter,
) ([]*model.{{.model.Name}}, error) {
	conds := []gen.Condition{}
	if filters != nil {
		{{range .model.Fields -}}
		{{- with  .|ToOpenApiType}}{{if not .IsSimpleType}}{{continue}}{{end}}{{end -}}
		if filters.{{.Name}} != nil {
			conds = append(conds, r.query.{{.Parent.Name}}.{{.Name}}.Eq(*filters.{{.Name}}))
		}
		{{end -}}
	}
	return r.query.{{.model.Name}}.Where(conds...).Find()
}

func (r *{{.model.Name|ToCamelCase}}Repository) Get(
	ctx context.Context,
	id int64,
) (*model.{{.model.Name}}, error) {
	return r.query.{{.model.Name}}.Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}})).First()
}

func (r *{{.model.Name|ToCamelCase}}Repository) Create(
	ctx context.Context,
	{{.model.Name|ToCamelCase}} model.{{.model.Name}},
) (*model.{{.model.Name}}, error) {
	err := r.query.{{.model.Name}}.Create(&{{.model.Name|ToCamelCase}})
	return &{{.model.Name|ToCamelCase}}, err
}

func (r *{{.model.Name|ToCamelCase}}Repository) Update(
	ctx context.Context,
	id int64,
	update model.{{.model.Name}},
) (*model.{{.model.Name}}, error) {
	{{.model.Name|ToCamelCase}} := &model.{{.model.Name}}{}
	_, err := r.query.{{.model.Name}}.
		Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}})).
		Omit(r.query.{{.model.Name}}.ID).
		Returning({{.model.Name|ToCamelCase}}).
		Updates(update)
	return {{.model.Name|ToCamelCase}}, err
}

func (r *{{.model.Name|ToCamelCase}}Repository) Delete(
	ctx context.Context,
	id int64,
) error {
	_, err := r.query.{{.model.Name}}.
		Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}})).
		Delete()
	return err
}
