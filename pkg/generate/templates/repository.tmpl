// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package repository

import (
	"context"
	model "{{.pkg}}"
	query "{{.queryPkg}}"
)

type {{.model.Name}}Filter struct {
	{{range .model.Fields -}}
	{{- with  .|ToOpenApiType}}{{if not .IsSimpleType}}{{continue}}{{end}}{{end -}}
	{{.Name}} {{.|GetGormQueryType|ToPtr}} `json:"{{.Name|ToSnakeCase}},omitempty"`
	{{end}}
}

type {{.model.Name}}Repository interface {
	List(
		ctx context.Context,
		filters *{{.model.Name}}Filter,
	) ([]*model.{{.model.Name}}, error)

	Get(
		ctx context.Context,
		id int64,
	) (*model.{{.model.Name}}, error)
	
	Create(
		ctx context.Context,
		{{.model.Name|ToCamelCase}} model.{{.model.Name}},
	) (*model.{{.model.Name}}, error)

	BatchCreate(
		ctx context.Context,
		{{.model.Name|ToCamelCase}}s []model.{{.model.Name}},
	) error
	
	Update(
		ctx context.Context,
		id int64,
		update model.{{.model.Name}},
	) (*model.{{.model.Name}}, error)
	
	Delete(
		ctx context.Context,
		id int64,
		force bool,
	) error

	BatchDelete(
		ctx context.Context,
		filters {{.model.Name}}Filter,
		force bool,
) (int, error)
}

type {{.model.Name|ToCamelCase}}Repository struct {
	query *query.Query
}

func New{{.model.Name}}Repository(query *query.Query) {{.model.Name}}Repository {
	return &{{.model.Name|ToCamelCase}}Repository{
		query: query,
	}
}

func (r *{{.model.Name|ToCamelCase}}Repository) List(
	ctx context.Context,
	filters *{{.model.Name}}Filter,
) ([]*model.{{.model.Name}}, error) {
	conds := []gen.Condition{}
	if filters != nil {
		conds = r.createFilterConditions(*filters)
	}
	return r.query.{{.model.Name}}.Where(conds...).Find()
}

func (r *{{.model.Name|ToCamelCase}}Repository) Get(
	ctx context.Context,
	id int64,
) (*model.{{.model.Name}}, error) {
	return r.query.{{.model.Name}}.Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}})).First()
}

func (r *{{.model.Name|ToCamelCase}}Repository) Create(
	ctx context.Context,
	{{.model.Name|ToCamelCase}} model.{{.model.Name}},
) (*model.{{.model.Name}}, error) {
	err := r.query.{{.model.Name}}.Create(&{{.model.Name|ToCamelCase}})
	return &{{.model.Name|ToCamelCase}}, err
}

func (r *{{.model.Name|ToCamelCase}}Repository) BatchCreate(
	ctx context.Context,
	{{.model.Name|ToCamelCase}}s []model.{{.model.Name}},
) error {
	return r.query.Transaction(func(tx *query.Query) error {
		for _, {{.model.Name|ToCamelCase}} := range {{.model.Name|ToCamelCase}}s {
			err := tx.{{.model.Name}}.Create(&{{.model.Name|ToCamelCase}})
			if err != nil {
				return err
			}
		}
		return nil
	})
}

func (r *{{.model.Name|ToCamelCase}}Repository) Update(
	ctx context.Context,
	id int64,
	update model.{{.model.Name}},
) (*model.{{.model.Name}}, error) {
	{{.model.Name|ToCamelCase}} := &model.{{.model.Name}}{}
	_, err := r.query.{{.model.Name}}.
		Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}})).
		Omit(r.query.{{.model.Name}}.ID).
		Returning({{.model.Name|ToCamelCase}}).
		Updates(update)
	return {{.model.Name|ToCamelCase}}, err
}

func (r *{{.model.Name|ToCamelCase}}Repository) Delete(
	ctx context.Context,
	id int64,
	force bool,
) error {
	q := r.query.{{.model.Name}}.
		Where(r.query.{{.model.Name}}.ID.Eq({{.model|WrapID}}))
	if force {
		q = q.Unscoped()
	}
	_, err := q.Delete()
	return err
}

func (r *{{.model.Name|ToCamelCase}}Repository) BatchDelete(
	ctx context.Context,
	filters {{.model.Name}}Filter,
	force bool,
) (int, error) {
	conds := r.createFilterConditions(filters)
	q := r.query.{{.model.Name}}.Where(conds...)

	if force {
		q = q.Unscoped()
	}

	res, err := q.Delete()
	if err != nil {
		return 0, err
	}
	return int(res.RowsAffected), nil
}

func (r *{{.model.Name|ToCamelCase}}Repository) createFilterConditions(filters {{.model.Name}}Filter) []gen.Condition {
	conds := []gen.Condition{}
	{{range .model.Fields -}}
	{{- with  .|ToOpenApiType}}{{if not .IsSimpleType}}{{continue}}{{end}}{{end -}}
	if filters.{{.Name}} != nil {
		{{if eq .Type "bool" -}}
		conds = append(conds, r.query.{{.Parent.Name}}.{{.Name}}.Is(*filters.{{.Name}}))
		{{- else -}}
		conds = append(conds, r.query.{{.Parent.Name}}.{{.Name}}.Eq(*filters.{{.Name}}))
		{{- end}}
	}
	{{end -}}
	return conds
}
