package api

import (
	"fmt"

	"github.com/joeriddles/goalesce/pkg/v2/builder"
	"github.com/joeriddles/goalesce/pkg/v2/entity"
	"github.com/joeriddles/goalesce/pkg/v2/generator"
	"github.com/joeriddles/goalesce/pkg/v2/utils"
)

var _ generator.ModelGenerator[*entity.GormModelMetadata] = new(controllerGenerator)

type controllerGenerator struct {
	model         *entity.GormModelMetadata
	createApi     *entity.GormModelMetadata
	updateApi     *entity.GormModelMetadata
	services      *generator.GeneratorServices
	goCodeBuilder builder.GoCodeBuilder
}

func newControllerGenerator(
	createApi *entity.GormModelMetadata,
	updateApi *entity.GormModelMetadata,
	services *generator.GeneratorServices,
) *controllerGenerator {
	return &controllerGenerator{
		createApi:     createApi,
		updateApi:     updateApi,
		services:      services,
		goCodeBuilder: builder.NewGoCodeBuilder(),
	}
}

func (g *controllerGenerator) DefaultOutputPath() string {
	panic("unimplemented")
}

func (g *controllerGenerator) EffectiveOutputPath() string {
	panic("unimplemented")
}

func (g *controllerGenerator) IsDisabled() bool {
	panic("unimplemented")
}

func (g *controllerGenerator) String() string {
	return g.goCodeBuilder.String()
}

func (g *controllerGenerator) Generate(model *entity.GormModelMetadata) (string, error) {
	g.model = model

	g.goCodeBuilder.DocComment("Code generated by github.com/joeriddles/goalesce DO NOT EDIT.")
	g.goCodeBuilder.Line(fmt.Sprintf("package %v", g.services.Config.ServerCodegen.PackageName))

	if err := g.writeImports(); err != nil {
		return "", err
	}

	g.writeInterface()
	g.goCodeBuilder.BlankLine()
	g.writeStruct()
	g.writeStructFactory()
	g.writeStructFunctions()

	formattedCode, err := g.goCodeBuilder.Format()
	if err != nil {
		return g.goCodeBuilder.String(), err
	}

	return formattedCode, nil
}

func (g *controllerGenerator) writeImports() error {
	repositoryPkg, err := g.services.Config.GetRepositoryPackage()
	if err != nil {
		return err
	}

	modelPkg, err := g.services.Config.GetModelPackage()
	if err != nil {
		return err
	}

	queryPkg, err := g.services.Config.GetQueryPackage()
	if err != nil {
		return err
	}

	typesPkg, err := g.services.Config.GetTypesPackage()
	if err != nil {
		return err
	}

	g.goCodeBuilder.ImportBlock(
		`"context"`,
		fmt.Sprintf(`model "%v"`, modelPkg),
		fmt.Sprintf(`query "%v"`, queryPkg),
		fmt.Sprintf(`repository "%v"`, repositoryPkg),
		fmt.Sprintf(`types "%v"`, typesPkg),
	)
	return nil
}

func (g *controllerGenerator) writeInterface() {
	name := g.model.Name
	cb := g.goCodeBuilder
	cb.Bock(fmt.Sprintf("type %vController interface", name), func() {
		cb.Line(fmt.Sprintf("Get%[1]v(ctx context.Context, request types.Get%[1]vRequestObject) (types.Get%[1]vResponseObject, error)", name))
		cb.Line(fmt.Sprintf("Post%[1]v(ctx context.Context, request types.Post%[1]vRequestObject) (types.Post%[1]vResponseObject, error)", name))
		cb.Line(fmt.Sprintf("Delete%[1]vID(ctx context.Context, request types.Delete%[1]vIDRequestObject) (types.Delete%[1]vIDResponseObject, error)", name))
		cb.Line(fmt.Sprintf("Get%[1]vID(ctx context.Context, request types.Get%[1]vIDRequestObject) (types.Get%[1]vIDResponseObject, error)", name))
		cb.Line(fmt.Sprintf("Put%[1]vID(ctx context.Context, request types.Put%[1]vIDRequestObject) (types.Put%[1]vIDResponseObject, error)", name))
	})
}

func (g *controllerGenerator) writeStruct() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder

	cb.Bock(fmt.Sprintf("type %vController struct", structName), func() {
		cb.Line(fmt.Sprintf("repository repository.%vRepository", name))
		cb.Line(fmt.Sprintf("mapper %vMapper", name))
		cb.Line(fmt.Sprintf("apiMapper %vApiMapper", name))
	})
}

func (g *controllerGenerator) writeStructFactory() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder
	cb.Bock(fmt.Sprintf("func New%[1]vController(query *query.Query) %[1]vController", name), func() {
		cb.Bock(fmt.Sprintf("return &%vController", structName), func() {
			cb.Line(fmt.Sprintf("repository: repository.New%vRepository(query),", name))
			cb.Line(fmt.Sprintf("mapper: New%vMapper(),", name))
			cb.Line(fmt.Sprintf("apiMapper: New%vApiMapper(),", name))
		})
	})
}

func (g *controllerGenerator) writeStructFunctions() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder

	// List
	cb.BlankLine()
	cb.Bockf("func (c *%vController) Get%[2]v(ctx context.Context, request types.Get%[2]vRequestObject) (types.Get%[2]vResponseObject, error)", structName, name)(func() {
		cb.Linef("%vs, err := c.repository.List(ctx, map[string]interface{}{})", structName)
		cb.ErrCheckNil()

		cb.BlankLine()
		cb.Linef("result := []types.%v{}", name)
		cb.Bockf("for _, %[1]v := range %[1]vs", structName)(func() {
			cb.Linef("api%v := c.apiMapper.Map(*%v)", name, structName)
			cb.Linef("result = append(result, api%v)", name)
		})

		cb.BlankLine()
		cb.Linef("return types.Get%v200JSONResponse(result), nil", name)
	})

	// Post
	cb.BlankLine()
	cb.Bockf("func (c *%vController) Post%[2]v(ctx context.Context, request types.Post%[2]vRequestObject) (types.Post%[2]vResponseObject, error)", structName, name)(func() {
		cb.Linef("src := request.Body")
		cb.Linef("dst := &model.%v{}", name)

		for _, field := range g.createApi.Fields {
			fieldStr := convertField(field, g.model)
			cb.Line(fieldStr)
		}

		cb.BlankLine()
		cb.Line("createdModel, err := c.repository.Create(ctx, *dst)")
		cb.ErrCheckNil()
		cb.Line("apiModel := c.apiMapper.Map(*createdModel)")
		cb.Linef("return types.Post%v201JSONResponse(apiModel), nil", name)
	})

	// Delete
	cb.BlankLine()
	cb.Bockf("func (c *%vController) Delete%[2]vID(ctx context.Context, request types.Delete%[2]vIDRequestObject) (types.Delete%[2]vIDResponseObject, error)", structName, name)(func() {
		cb.Bock("if err := c.repository.Delete(ctx, request.ID); err != nil", func() {
			cb.Line("return nil, err")
		})
		cb.Linef("return types.Delete%vID204Response{}, nil", name)
	})

	// Get
	cb.BlankLine()
	cb.Bockf("func (c *%vController) Get%[2]vID(ctx context.Context, request types.Get%[2]vIDRequestObject) (types.Get%[2]vIDResponseObject, error)", structName, name)(func() {
		cb.Line("model, err := c.repository.Get(ctx, request.ID)")
		cb.ErrCheckNil()
		cb.Line("apiModel := c.apiMapper.Map(*model)")
		cb.Linef("return types.Get%vID200JSONResponse(apiModel), nil", name)
	})

	// Put
	cb.BlankLine()
	cb.Bockf("func (c *%vController) Put%[2]vID(ctx context.Context, request types.Put%[2]vIDRequestObject) (types.Put%[2]vIDResponseObject, error)", structName, name)(func() {
		cb.Linef("src := request.Body")
		cb.Linef("dst := &model.%v{}", name)

		for _, field := range g.updateApi.Fields {
			fieldStr := convertField(field, g.model)
			cb.Line(fieldStr)
		}

		cb.BlankLine()
		cb.Bock("if _, err := c.repository.Update(ctx, request.ID, *dst); err != nil", func() {
			cb.Line("return nil, err")
		})
		cb.Linef("return types.Put%vID204Response{}, nil", name)
	})
}
