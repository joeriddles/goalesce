package api

import (
	"fmt"
	"path/filepath"

	"github.com/joeriddles/goalesce/pkg/v2/builder"
	"github.com/joeriddles/goalesce/pkg/v2/config"
	"github.com/joeriddles/goalesce/pkg/v2/generator"
	"github.com/joeriddles/goalesce/pkg/v2/utils"
)

var _ generator.ModelGenerator[any] = new(mainGenerator)

type mainGenerator struct {
	cfg             *config.Config
	relativePkgPath string

	goCodeBuilder builder.GoCodeBuilder
}

func newMainGenerator(
	cfg *config.Config,
	goCodeBuilder builder.GoCodeBuilder,
) (*mainGenerator, error) {
	modulePath, err := utils.FindGoMod(cfg.OutputFile, cfg.ModuleName)
	if err != nil {
		return nil, err
	}
	moduleRootPath := filepath.Dir(modulePath)
	relativePkgPath, err := filepath.Rel(moduleRootPath, cfg.OutputFile)
	if err != nil {
		return nil, err
	}

	return &mainGenerator{
		cfg:             cfg,
		relativePkgPath: relativePkgPath,
		goCodeBuilder:   goCodeBuilder,
	}, nil
}

func (m *mainGenerator) DefaultOutputPath() string {
	panic("unimplemented")
}

func (m *mainGenerator) EffectiveOutputPath() string {
	panic("unimplemented")
}

func (m *mainGenerator) IsDisabled() bool {
	panic("unimplemented")
}

func (g *mainGenerator) Generate(_ any) (string, error) {
	cb := g.goCodeBuilder

	cb.DocComment("Code generated by github.com/joeriddles/goalesce DO NOT EDIT.")
	cb.Line("package main")

	g.writeImports()
	g.writeMain()

	formattedCode, err := g.goCodeBuilder.Format()
	if err != nil {
		return g.goCodeBuilder.String(), err
	}
	return formattedCode, nil
}

func (g *mainGenerator) writeImports() {
	cb := g.goCodeBuilder
	apiImportPath := filepath.Join(g.cfg.ModuleName, g.relativePkgPath, "api")
	cb.ImportBlock(
		`"log"`,
		`"net/http"`,
		fmt.Sprintf(`api "%v"`, apiImportPath),
	)
}

func (g *mainGenerator) writeMain() {
	cb := g.goCodeBuilder
	cb.Bock("func main()", func() {
		cb.Line("server := api.NewServer()")
		cb.BlankLine()
		cb.Line("r := http.NewServeMux()")
		cb.BlankLine()
		cb.Line("si := api.NewStrictHandler(server, []api.StrictMiddlewareFunc{})")
		cb.Line("h := api.HandlerFromMux(si, r)")
		cb.BlankLine()
		cb.Bock("s := &http.Server", func() {
			cb.Line("Handler: h,")
			cb.Line("Addr: \"0.0.0.0:8080\",")
		})
		cb.BlankLine()
		cb.DocComment("And we serve HTTP until the world ends.")
		cb.Line("log.Fatal(s.ListenAndServe())")
	})
}
