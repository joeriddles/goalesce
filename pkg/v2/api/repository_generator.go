package api

import (
	"fmt"

	"github.com/joeriddles/goalesce/pkg/v2/builder"
	"github.com/joeriddles/goalesce/pkg/v2/entity"
	"github.com/joeriddles/goalesce/pkg/v2/generator"
	"github.com/joeriddles/goalesce/pkg/v2/utils"
)

var _ generator.ModelGenerator[*entity.GormModelMetadata] = new(repositoryGenerator)

type repositoryGenerator struct {
	model         *entity.GormModelMetadata
	services      *generator.GeneratorServices
	goCodeBuilder builder.GoCodeBuilder
}

func newRepositoryGenerator(
	services *generator.GeneratorServices,
) *repositoryGenerator {
	return &repositoryGenerator{
		services:      services,
		goCodeBuilder: builder.NewGoCodeBuilder(),
	}
}

func (r *repositoryGenerator) DefaultOutputPath() string {
	panic("unimplemented")
}

func (r *repositoryGenerator) EffectiveOutputPath() string {
	panic("unimplemented")
}

func (r *repositoryGenerator) IsDisabled() bool {
	panic("unimplemented")
}

func (g *repositoryGenerator) Generate(model *entity.GormModelMetadata) (string, error) {
	g.model = model

	g.goCodeBuilder.DocComment("Code generated by github.com/joeriddles/goalesce DO NOT EDIT.")
	g.goCodeBuilder.Line("package repository")

	if err := g.writeImports(); err != nil {
		return "", err
	}

	g.writeInterface()
	g.goCodeBuilder.BlankLine()
	g.writeStruct()
	g.writeStructFactory()
	g.writeStructFunctions()

	formattedCode, err := g.goCodeBuilder.Format()
	if err != nil {
		return g.goCodeBuilder.String(), err
	}

	return formattedCode, nil
}

func (g *repositoryGenerator) writeImports() error {
	modelPkg, err := g.services.Config.GetModelPackage()
	if err != nil {
		return err
	}

	queryPkg, err := g.services.Config.GetQueryPackage()
	if err != nil {
		return err
	}

	g.goCodeBuilder.ImportBlock(
		`"context"`,
		fmt.Sprintf(`model "%v"`, modelPkg),
		fmt.Sprintf(`query "%v"`, queryPkg),
	)
	return nil
}

func (g *repositoryGenerator) writeInterface() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder
	cb.Bockf("type %vRepository interface", name)(func() {
		cb.Linef("List(ctx context.Context, filters any) ([]*model.%v, error)", name)
		cb.Linef("Get(ctx context.Context, id int64) (*model.%v, error)", name)
		cb.Linef("Create(ctx context.Context, %v model.%[2]v) (*model.%[2]v, error)", structName, name)
		cb.Linef("Update(ctx context.Context, update model.%[1]v) (*model.%[1]v, error)", name)
		cb.Linef("Delete(ctx context.Context, id int64) error")
	})
}

func (g *repositoryGenerator) writeStruct() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder
	cb.Bockf("type %vRepository struct", structName)(func() {
		cb.Line("query *query.Query")
	})
}

func (g *repositoryGenerator) writeStructFactory() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	cb := g.goCodeBuilder
	cb.Bockf("func New%[1]vRepository(query *query.Query) %[1]vRepository", name)(func() {
		cb.Bockf("return &%vRepository", structName)(func() {
			cb.Line("query: query,")
		})
	})
}

func (g *repositoryGenerator) writeStructFunctions() {
	name := g.model.Name
	structName := utils.ToCamelCase(name)
	getModelId := utils.WrapID(g.model)
	cb := g.goCodeBuilder

	// List
	cb.BlankLine()
	cb.Bockf("func (r *%vRepository) List(ctx context.Context, filters any) ([]*model.%v, error)", structName, name)(func() {
		cb.Linef("return r.query.%v.Find()", name)
	})

	// Get
	cb.BlankLine()
	cb.Bockf("func (r *%vRepository) Get(ctx context.Context, id int64) (*model.%v, error)", structName, name)(func() {
		cb.Linef("return r.query.%[1]v.Where(r.query.%[1]v.ID.Eq(%[2]v)).First()", name, getModelId)
	})

	// Create
	cb.BlankLine()
	cb.Bockf("func (r *%[1]vRepository) Create(ctx context.Context, %[1]v model.%[2]v) (*model.%[2]v, error)", structName, name)(func() {
		cb.Linef("err := r.query.%v.Create(&%v)", name, structName)
		cb.Linef("return &%v, err", structName)
	})

	// Update
	cb.BlankLine()
	cb.Bockf("func (r *%[1]vRepository) Update(ctx context.Context, update model.%[2]v) (*model.%[2]v, error)", structName, name)(func() {
		cb.Linef("%v := &model.%v{}", structName, name)
		cb.Linef("_, err := r.query.%[1]v.\n"+
			"\tWhere(r.query.%[1]v.ID.Eq(%[3]v)).\n"+
			"\tOmit(r.query.%[1]v.ID).\n"+
			"\tReturning(%[2]v).\n"+
			"\tUpdates(update)", name, structName, getModelId)
		cb.Linef("return %v, err", structName)
	})

	// Delete
	cb.BlankLine()
	cb.Bockf("func (r *%vRepository) Delete(ctx context.Context, id int64) error", structName)(func() {
		cb.Linef("_, err := r.query.%[1]v.\n"+
			"\tWhere(r.query.%[1]v.ID.Eq(%[2]v)).\n"+
			"\tDelete()", name, getModelId)
		cb.Line("return err")
	})
}
