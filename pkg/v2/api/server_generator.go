package api

import (
	"fmt"
	"path/filepath"

	"github.com/joeriddles/goalesce/pkg/v2/builder"
	"github.com/joeriddles/goalesce/pkg/v2/config"
	"github.com/joeriddles/goalesce/pkg/v2/entity"
	"github.com/joeriddles/goalesce/pkg/v2/generator"
	"github.com/joeriddles/goalesce/pkg/v2/utils"
)

var _ generator.ModelGenerator[[]*entity.GormModelMetadata] = new(serverGenerator)

type serverGenerator struct {
	cfg             *config.Config
	relativePkgPath string
	typesPkg        *string

	goCodeBuilder builder.GoCodeBuilder
}

func newServerGenerator(
	cfg *config.Config,
	goCodeBuilder builder.GoCodeBuilder,
) (*serverGenerator, error) {
	modulePath, err := utils.FindGoMod(cfg.OutputFile, cfg.ModuleName)
	if err != nil {
		return nil, err
	}
	moduleRootPath := filepath.Dir(modulePath)
	relativePkgPath, err := filepath.Rel(moduleRootPath, cfg.OutputFile)
	if err != nil {
		return nil, err
	}

	var typesPkg *string = nil
	defaultOutputFile := filepath.Join(cfg.OutputFile, "api", "types.gen.go")
	if cfg.TypesCodegen.OutputFile != defaultOutputFile {
		relPkg, err := filepath.Rel(moduleRootPath, cfg.TypesCodegen.OutputFile)
		if err != nil {
			return nil, err
		}
		pkg := filepath.Join(cfg.ModuleName, relPkg)
		pkg = filepath.Dir(pkg) // remove filename
		typesPkg = &pkg
	}

	return &serverGenerator{
		cfg:             cfg,
		relativePkgPath: relativePkgPath,
		typesPkg:        typesPkg,
		goCodeBuilder:   goCodeBuilder,
	}, nil
}

func (g *serverGenerator) DefaultOutputPath() string {
	panic("unimplemented")
}

func (g *serverGenerator) EffectiveOutputPath() string {
	panic("unimplemented")
}

func (g *serverGenerator) IsDisabled() bool {
	panic("unimplemented")
}

func (g *serverGenerator) Generate(metadatas []*entity.GormModelMetadata) (string, error) {
	cb := g.goCodeBuilder

	cb.DocComment("Code generated by github.com/joeriddles/goalesce DO NOT EDIT.")

	pkg := g.cfg.ServerCodegen.PackageName
	cb.Linef("package %v", pkg)

	g.writeImports()
	g.writeStruct(metadatas)
	g.writeNewFunc(metadatas)
	g.writeCrudFuncs(metadatas)

	formattedCode, err := g.goCodeBuilder.Format()
	if err != nil {
		return g.goCodeBuilder.String(), err
	}
	return formattedCode, nil
}

func (g *serverGenerator) writeImports() {
	cb := g.goCodeBuilder
	queryPkg := g.cfg.QueryPkg

	imports := []string{
		`"context"`,
		fmt.Sprintf(`query "%v"`, queryPkg),
	}

	if g.typesPkg != nil {
		imports = append(imports, fmt.Sprintf(`types "%v"`, *g.typesPkg))
	}

	cb.ImportBlock(imports...)
}

func (g *serverGenerator) writeStruct(metadatas []*entity.GormModelMetadata) {
	cb := g.goCodeBuilder
	cb.Bock("type Server struct", func() {
		for _, metadata := range metadatas {
			cb.Linef("%vController", metadata.Name)
		}
	})
	cb.BlankLine()
}

func (g *serverGenerator) writeNewFunc(metadatas []*entity.GormModelMetadata) {
	cb := g.goCodeBuilder
	cb.Bock("func NewServer(query *query.Query) *Server", func() {
		cb.Bock("return &Server", func() {
			for _, metadata := range metadatas {
				cb.Linef("%[1]vController: New%[1]vController(query),", metadata.Name)
			}
		})
	})
	cb.BlankLine()
}

func (g *serverGenerator) writeCrudFuncs(metadatas []*entity.GormModelMetadata) {
	cb := g.goCodeBuilder

	types := ""
	if g.typesPkg != nil {
		types = fmt.Sprintf("%v.", *g.typesPkg)
	}

	for _, metadata := range metadatas {
		// List
		cb.Bockf("func (s *Server) Get%[1]v(ctx context.Context, request %[2]vGet%[1]vRequestObject) (%[2]vGet%[1]vResponseObject, error)", metadata.Name, types)(func() {
			cb.Linef("return s.%[1]vController.Get%[1]v(ctx, request)", metadata.Name)
		})
		cb.BlankLine()

		// Post
		cb.Bockf("func (s *Server) Post%[1]v(ctx context.Context, request %[2]vPost%[1]vRequestObject) (%[2]vPost%[1]vResponseObject, error)", metadata.Name, types)(func() {
			cb.Linef("return s.%[1]vController.Post%[1]v(ctx, request)", metadata.Name)
		})
		cb.BlankLine()

		// Delete
		cb.Bockf("func (s *Server) Delete%[1]vID(ctx context.Context, request %[2]vDelete%[1]vIDRequestObject) (%[2]vDelete%[1]vIDResponseObject, error)", metadata.Name, types)(func() {
			cb.Linef("return s.%[1]vController.Delete%[1]vID(ctx, request)", metadata.Name)
		})
		cb.BlankLine()

		// Get
		cb.Bockf("func (s *Server) Get%[1]vID(ctx context.Context, request %[2]vGet%[1]vIDRequestObject) (%[2]vGet%[1]vIDResponseObject, error)", metadata.Name, types)(func() {
			cb.Linef("return s.%[1]vController.Get%[1]vID(ctx, request)", metadata.Name)
		})
		cb.BlankLine()

		// Put
		cb.Bockf("func (s *Server) Put%[1]vID(ctx context.Context, request %[2]vPut%[1]vIDRequestObject) (%[2]vPut%[1]vIDResponseObject, error)", metadata.Name, types)(func() {
			cb.Linef("return s.%[1]vController.Put%[1]vID(ctx, request)", metadata.Name)
		})
		cb.BlankLine()
	}
	cb.BlankLine()
}
