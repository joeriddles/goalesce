// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package api

import (
	"context"

	types "github.com/joeriddles/goalesce/examples/basic/generated/api"
	repository "github.com/joeriddles/goalesce/examples/basic/generated/repository"
	model "github.com/joeriddles/goalesce/examples/basic/model"
	query "github.com/joeriddles/goalesce/examples/basic/query"
)

type UserController interface {
	GetUser(ctx context.Context, request types.GetUserRequestObject) (types.GetUserResponseObject, error)
	PostUser(ctx context.Context, request types.PostUserRequestObject) (types.PostUserResponseObject, error)
	DeleteUserID(ctx context.Context, request types.DeleteUserIDRequestObject) (types.DeleteUserIDResponseObject, error)
	GetUserID(ctx context.Context, request types.GetUserIDRequestObject) (types.GetUserIDResponseObject, error)
	PutUserID(ctx context.Context, request types.PutUserIDRequestObject) (types.PutUserIDResponseObject, error)
}

type userController struct {
	repository repository.UserRepository
	mapper     UserMapper
	apiMapper  UserApiMapper
}

func NewUserController(query *query.Query) UserController {
	return &userController{
		repository: repository.NewUserRepository(query),
		mapper:     NewUserMapper(),
		apiMapper:  NewUserApiMapper(),
	}
}

func (c *userController) GetUser(ctx context.Context, request types.GetUserRequestObject) (types.GetUserResponseObject, error) {
	users, err := c.repository.List(ctx, map[string]interface{}{})
	if err != nil {
		return nil, err
	}

	result := []types.User{}
	for _, user := range users {
		apiUser := c.apiMapper.Map(*user)
		result = append(result, apiUser)
	}

	return types.GetUser200JSONResponse(result), nil
}

func (c *userController) PostUser(ctx context.Context, request types.PostUserRequestObject) (types.PostUserResponseObject, error) {
	src := request.Body
	dst := &model.User{}
	dst.Name = src.Name

	createdModel, err := c.repository.Create(ctx, *dst)
	if err != nil {
		return nil, err
	}
	apiModel := c.apiMapper.Map(*createdModel)
	return types.PostUser201JSONResponse(apiModel), nil
}

func (c *userController) DeleteUserID(ctx context.Context, request types.DeleteUserIDRequestObject) (types.DeleteUserIDResponseObject, error) {
	if err := c.repository.Delete(ctx, request.ID); err != nil {
		return nil, err
	}
	return types.DeleteUserID204Response{}, nil
}

func (c *userController) GetUserID(ctx context.Context, request types.GetUserIDRequestObject) (types.GetUserIDResponseObject, error) {
	model, err := c.repository.Get(ctx, request.ID)
	if err != nil {
		return nil, err
	}
	apiModel := c.apiMapper.Map(*model)
	return types.GetUserID200JSONResponse(apiModel), nil
}

func (c *userController) PutUserID(ctx context.Context, request types.PutUserIDRequestObject) (types.PutUserIDResponseObject, error) {
	src := request.Body
	dst := &model.User{}
	dst.Name = src.Name

	if _, err := c.repository.Update(ctx, request.ID, *dst); err != nil {
		return nil, err
	}
	return types.PutUserID204Response{}, nil
}
