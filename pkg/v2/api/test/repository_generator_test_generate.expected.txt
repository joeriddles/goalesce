// Code generated by github.com/joeriddles/goalesce DO NOT EDIT.
package repository

import (
	"context"

	model "github.com/joeriddles/goalesce/examples/basic/model"
	query "github.com/joeriddles/goalesce/examples/basic/query"
)

type UserRepository interface {
	List(ctx context.Context, filters any) ([]*model.User, error)
	Get(ctx context.Context, id int64) (*model.User, error)
	Create(ctx context.Context, user model.User) (*model.User, error)
	Update(ctx context.Context, update model.User) (*model.User, error)
	Delete(ctx context.Context, id int64) error
}

type userRepository struct {
	query *query.Query
}

func NewUserRepository(query *query.Query) UserRepository {
	return &userRepository{
		query: query,
	}
}

func (r *userRepository) List(ctx context.Context, filters any) ([]*model.User, error) {
	return r.query.User.Find()
}

func (r *userRepository) Get(ctx context.Context, id int64) (*model.User, error) {
	return r.query.User.Where(r.query.User.ID.Eq(id)).First()
}

func (r *userRepository) Create(ctx context.Context, user model.User) (*model.User, error) {
	err := r.query.User.Create(&user)
	return &user, err
}

func (r *userRepository) Update(ctx context.Context, update model.User) (*model.User, error) {
	user := &model.User{}
	_, err := r.query.User.
		Where(r.query.User.ID.Eq(id)).
		Omit(r.query.User.ID).
		Returning(user).
		Updates(update)
	return user, err
}

func (r *userRepository) Delete(ctx context.Context, id int64) error {
	_, err := r.query.User.
		Where(r.query.User.ID.Eq(id)).
		Delete()
	return err
}
